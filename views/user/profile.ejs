<%- include('../../Views/layouts/user/header.ejs') %>

<link rel="stylesheet" href="/styles/profile.css">

<main class="main">
  <div class="page-header breadcrumb-wrap">
    <div class="container">
      <div class="breadcrumb">
        <a href="/" rel="nofollow">Home</a>
        <span>/</span> Profile <span>/</span> Account
      </div>
    </div>
  </div>
  
  <section class="pt-4 pb-4">
    <div class="container">
      <div class="row">
        <div class="col-lg-10 m-auto">
          <div class="row">
            <!-- Dashboard Menu -->
            <div class="col-md-4">
              <div class="dashboard-menu">
                <ul class="nav flex-column" role="tablist">
                  <li class="nav-item">
                    <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab">
                      <i class="fas fa-user-circle"></i>Dashboard
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab">
                      <i class="fas fa-map-marker-alt"></i>My Address
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab">
                      <i class="fas fa-shopping-bag"></i>Orders
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="wallet-tab" data-bs-toggle="tab" href="#track-orders" role="tab">
                      <i class="fas fa-wallet"></i>Wallet Status
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="wallet-history-tab" data-bs-toggle="tab" href="#wallet-history" role="tab">
                      <i class="fas fa-history"></i>Wallet History
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="referral-tab" data-bs-toggle="tab" href="#referal" role="tab">
                      <i class="fas fa-user-friends"></i>Referrals
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" href="/logout">
                      <i class="fas fa-sign-out-alt"></i>Logout
                    </a>
                  </li>
                </ul>
              </div>
            </div>

            <!-- Dashboard Content -->
            <div class="col-md-8">
              <div class="tab-content dashboard-content">
                <!-- Profile Dashboard -->
                <div class="tab-pane fade show active" id="dashboard" role="tabpanel">
                  <div class="card card-green">
                    <div class="card-header">
                      <h5 class="mb-0 text-center">Welcome, <%= user.name %></h5>
                    </div>
                    <div class="card-body profile-details">
                        <p class="card-text d-flex align-items-center justify-content-between">
                            <span>
                                <i class="fa-solid fa-user me-2"></i>
                                <strong>Name:</strong> <span id="userName"><%= user.name %></span>
                            </span>
                            <button class="btn btn-sm btn-success" onclick="editField('name', '<%= user.name %>')">
                                <i class="fas fa-edit"></i>
                            </button>
                        </p>
                        <p class="card-text d-flex align-items-center justify-content-between">
                            <span>
                                <i class="fas fa-phone me-2"></i>
                                <strong>Phone:</strong> <span id="userPhone"><%= user.phone %></span>
                            </span>
                            <button class="btn btn-sm btn-success" onclick="editField('phone', '<%= user.phone %>')">
                                <i class="fas fa-edit"></i>
                            </button>
                        </p>
                        <p class="card-text d-flex align-items-center justify-content-between">
                            <span>
                                <i class="fas fa-envelope me-2"></i>
                                <strong>Email:</strong> <span id="userEmail"><%= user.email %></span>
                            </span>
                            <button class="btn btn-sm btn-success" onclick="editField('email', '<%= user.email %>')">
                                <i class="fas fa-edit"></i>
                            </button>
                        </p>
                        <div class="mt-4">
                            <a href="/change-password" class="btn btn-success">
                              <i class="fas fa-key me-1"></i> Change Password
                            </a>
                        </div>
                    </div>
                  </div>
                </div>

                <!-- Address Section -->
                <div class="tab-pane fade" id="address" role="tabpanel">
                  <div class="card">
                    <div class="card-header">
                      <h5 class="mb-0">My Addresses</h5>
                    </div>
                    <div class="card-body">
                      <!-- <div class="text-end mb-3">
                        <a href="#" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addressModal">
                          <i class="fas fa-plus me-1"></i> Add New Address
                        </a>
                      </div> -->
                      <div id="addressList" class="row g-4">
                        <!-- Address cards will be dynamically inserted here -->
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Orders Section -->
                <div class="tab-pane fade" id="orders" role="tabpanel">
                  <div class="card">
                    <div class="card-header">
                      <h5 class="mb-0">Your Orders</h5>
                    </div>
                    <div class="card-body">
                      <div class="table-responsive">
                        <table class="table">
                          <thead>
                            <tr>
                              <th>Order ID</th>
                              <th>Date</th>
                              <th>Status</th>
                              <th>Total</th>
                              <th>Actions</th>
                            </tr>
                          </thead>
                          <tbody>
                            <% if (orders && orders.length > 0) { %>
                              <% orders.forEach(order => { %>
                                <tr>
                                  <td><%= order.orderId %></td>
                                  <td><%= new Date(order.createdOn).toLocaleDateString('en-US', { 
                                    year: 'numeric', 
                                    month: 'long', 
                                    day: 'numeric' 
                                  }) %></td>
                                  <td>
                                    <span class="badge <%= 
                                      order.status === 'Delivered' ? 'bg-success' : 
                                      order.status === 'Cancelled' ? 'bg-danger' : 
                                      'bg-warning' %> rounded-pill">
                                      <%= order.status %>
                                    </span>
                                  </td>
                                  <td>â‚¹<%= order.finalAmount %></td>
                                  <td>
                                    <div class="d-inline-flex align-items-center">
                                      <button class="btn btn-sm btn-dark" onclick="viewOrderDetails('<%= order._id %>')">
                                        <i class="fas fa-eye me-1"></i>View
                                      </button>
                                      <% if (['Pending', 'Processing'].includes(order.status)) { %>
                                        <button onclick="cancelOrder('<%= order._id %>')" class="btn btn-sm btn-outline-danger ms-2">
                                          <i class="fas fa-times me-1"></i>Cancel
                                        </button>
                                      <% } %>
                                    </div>
                                  </td>
                                </tr>
                              <% }); %>
                            <% } else { %>
                              <tr>
                                <td colspan="5" class="text-center py-4">
                                  <div class="d-flex flex-column align-items-center">
                                    <i class="fas fa-shopping-bag fa-3x text-muted mb-3"></i>
                                    <p class="mb-1">No orders found</p>
                                    <a href="/shop" class="btn btn-success mt-2">Start Shopping</a>
                                  </div>
                                </td>
                              </tr>
                            <% } %>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Wallet Status Section -->
                <div class="tab-pane fade" id="track-orders" role="tabpanel">
                  <div class="card">
                    <div class="card-header">
                      <h5 class="mb-0">Wallet</h5>
                    </div>
                    <div class="card-body contact-from-area">
                      <div class="row">
                        <div class="col-lg-8 mx-auto text-center mt-90">
                          <form>
                            <div class="form-group">
                              <label for="walletAmount" class="h4">Amount</label>
                              <div class="h3"></div>
                            </div>
                            <button type="button" class="btn btn-success" onclick="">Add Money</button>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Wallet History Section -->
                <div class="tab-pane fade" id="wallet-history" role="tabpanel">
                  <div class="card">
                    <div class="card-header">
                      <h5 class="mb-0">Wallet History</h5>
                    </div>
                    <div class="card-body">
                      <div class="table-responsive">
                        <table class="table">
                          <thead>
                            <tr>
                              <th>Date</th>
                              <th>Status</th>
                              <th>Amount</th>
                            </tr>
                          </thead>
                          <tbody>
                            <!-- Wallet history rows will be dynamically added here -->
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Referral Section -->
                <div class="tab-pane fade" id="referal" role="tabpanel">
                  <div class="card">
                    <div class="card-header">
                      <h5 class="mb-0">Referal</h5>
                    </div>
                    <div class="card-body">
                      <h6 class="mb-3">Refer your friends and earn money!</h6>
                      <p>Share this link: <strong>></strong></p>
                      <p>Earned: â‚¹</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</main>

<!-- Order Details Modal -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="order-info mb-4">
          <h6>Order Information</h6>
          <div class="row">
            <div class="col-md-6">
              <p><strong>Order ID:</strong> <span id="modalOrderId"></span></p>
              <p><strong>Order Date:</strong> <span id="modalOrderDate"></span></p>
              <p><strong>Status:</strong> <span id="modalOrderStatus"></span></p>
            </div>
            <div class="col-md-6">
              <p><strong>Payment Method:</strong> <span id="modalPaymentMethod"></span></p>
              <p><strong>Payment Status:</strong> <span id="modalPaymentStatus"></span></p>
              <p><strong>Total Amount:</strong> â‚¹<span id="modalTotalAmount"></span></p>
            </div>
          </div>
        </div>
        
        <div class="delivery-address mb-4">
          <h6>Delivery Address</h6>
          <div class="bg-light p-3 rounded">
            <p class="mb-1" id="modalAddressName"></p>
            <p class="mb-1" id="modalAddressStreet"></p>
            <p class="mb-1" id="modalAddressCity"></p>
            <p class="mb-0" id="modalAddressPhone"></p>
          </div>
        </div>

        <div class="ordered-items">
          <h6>Ordered Items</h6>
          <div class="table-responsive">
            <table class="table">
              <thead>
                <tr>
                  <th>Product</th>
                  <th>Price</th>
                  <th>Quantity</th>
                  <th>Total</th>
                </tr>
              </thead>
              <tbody id="modalOrderItems">
                <!-- Order items will be dynamically added here -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('../../Views/layouts/user/footer.ejs') %>

<!-- Scripts -->
<script src="https://kit.fontawesome.com/your-font-awesome-kit.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
function editField(field, currentValue) {
    Swal.fire({
        title: `Edit ${field.charAt(0).toUpperCase() + field.slice(1)}`,
        input: field === 'phone' ? 'tel' : field === 'email' ? 'email' : 'text',
        inputValue: currentValue,
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return `Please enter your ${field}!`;
            }
            
            if (field === 'phone') {
                const phoneRegex = /^\d{10}$/;
                if (!phoneRegex.test(value)) {
                    return 'Please enter a valid 10-digit phone number!';
                }
            }
            
            if (field === 'email') {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(value)) {
                    return 'Please enter a valid email address!';
                }
            }
        }
    }).then((result) => {
        if (result.isConfirmed) {
            const endpoint = field === 'name' ? '/edit-profile' : 
                           field === 'email' ? '/change-email' : '/change-phone';
            
            fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ [field]: result.value })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById(`user${field.charAt(0).toUpperCase() + field.slice(1)}`).textContent = result.value;
                    Swal.fire({
                        icon: 'success',
                        title: 'Updated Successfully!',
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    throw new Error(data.message || 'Update failed');
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Update Failed',
                    text: error.message || 'Something went wrong!'
                });
            });
        }
    });
}

// Function to load addresses
async function loadAddresses() {
    try {
        const response = await fetch('/get-addresses');
        const data = await response.json();
        
        const addressList = document.getElementById('addressList');
        if (!addressList) {
            console.error('Address list element not found');
            return;
        }
        
        addressList.innerHTML = ''; // Clear existing addresses

        if (data.addresses && data.addresses.length > 0) {
            // Add the "Add New Address" card first
            const addNewCard = `
                <div class="col-md-6 col-lg-4">
                    <div class="add-address-card" data-bs-toggle="modal" data-bs-target="#addressModal">
                        <div class="add-address-content">
                            <i class="fas fa-plus-circle"></i>
                            <p>Add New Address</p>
                        </div>
                    </div>
                </div>
            `;
            addressList.insertAdjacentHTML('beforeend', addNewCard);

            // Add existing addresses
            data.addresses.forEach((address, index) => {
                const addressTypeClass = address.addressType.toLowerCase();
                const addressCard = `
                    <div class="col-md-6 col-lg-4">
                        <div class="address-card">
                            <div class="card-body">
                                <div class="address-actions">
                                    <div class="dropdown">
                                        <button class="btn btn-link p-0" data-bs-toggle="dropdown">
                                            <i class="fas fa-ellipsis-v"></i>
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li><a class="dropdown-item" href="#" onclick="editAddress(${index})">
                                                <i class="fas fa-edit"></i> Edit
                                            </a></li>
                                            <li><a class="dropdown-item text-danger" href="#" onclick="deleteAddress(${index})">
                                                <i class="fas fa-trash-alt"></i> Delete
                                            </a></li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="address-type ${addressTypeClass}">
                                    <i class="fas ${address.addressType === 'Home' ? 'fa-home' : 
                                                   address.addressType === 'Work' ? 'fa-briefcase' : 'fa-map-marker-alt'}">
                                    </i>
                                    ${address.addressType}
                                </div>
                                <h5 class="address-name">${address.name}</h5>
                                <div class="address-details">
                                    ${address.landMark}<br>
                                    ${address.city}, ${address.state}<br>
                                    PIN: ${address.pincode}
                                </div>
                                <div class="address-phone">
                                    <i class="fas fa-phone-alt"></i>
                                    ${address.phone}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                addressList.insertAdjacentHTML('beforeend', addressCard);
            });
        } else {
            // Show only Add New Address card centered
            const emptyState = `
                <div class="col-12 d-flex justify-content-center align-items-center min-vh-50">
                    <div class="col-md-6 col-lg-4">
                        <div class="add-address-card" data-bs-toggle="modal" data-bs-target="#addressModal">
                            <div class="add-address-content">
                                <i class="fas fa-plus-circle"></i>
                                <p>Add New Address</p>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            addressList.insertAdjacentHTML('beforeend', emptyState);
        }
    } catch (error) {
        console.error('Error loading addresses:', error);
    }
}

// Function to edit address
async function editAddress(index) {
    try {
        const response = await fetch('/get-addresses');
        const data = await response.json();
        
        if (data.addresses && data.addresses[index]) {
            const address = data.addresses[index];
            
            // Update modal title
            document.getElementById('addressModalLabel').textContent = 'Edit Address';
            
            // Fill form with address data
            document.getElementById('addressId').value = index;
            document.getElementById('addressType').value = address.addressType;
            document.getElementById('name').value = address.name;
            document.getElementById('phone').value = address.phone;
            document.getElementById('city').value = address.city;
            document.getElementById('landmark').value = address.landMark;
            document.getElementById('state').value = address.state;
            document.getElementById('pincode').value = address.pincode;
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('addressModal'));
            if (modal) {
                modal.show();
            }
        }
    } catch (error) {
        console.error('Error loading address for edit:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to load address for editing'
        });
    }
}

// Function to delete address
async function deleteAddress(index) {
    try {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        });

        if (result.isConfirmed) {
            const response = await fetch(`/delete-address/${index}`, {
                method: 'DELETE'
            });

            const data = await response.json();

            if (response.ok) {
                await Swal.fire(
                    'Deleted!',
                    'Your address has been deleted.',
                    'success'
                );
                loadAddresses();
            } else {
                throw new Error(data.message || 'Failed to delete address');
            }
        }
    } catch (error) {
        console.error('Error deleting address:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message
        });
    }
}

// Wait for DOM to be fully loaded before adding event listeners
document.addEventListener('DOMContentLoaded', function() {
    // Load addresses when page loads
    loadAddresses();

    // Function to validate form fields
    function validateField(field) {
        const feedbackElement = field.nextElementSibling;
        if (field.validity.valid) {
            field.classList.remove('is-invalid');
            field.classList.add('is-valid');
            if (feedbackElement && feedbackElement.classList.contains('invalid-feedback')) {
                feedbackElement.style.display = 'none';
            }
        } else {
            field.classList.remove('is-valid');
            field.classList.add('is-invalid');
            if (feedbackElement && feedbackElement.classList.contains('invalid-feedback')) {
                feedbackElement.style.display = 'block';
            }
        }
    }

    // Add input validation listeners
    const form = document.getElementById('addressForm');
    if (form) {
        const inputs = form.querySelectorAll('input, select');
        
        // Initial validation state
        inputs.forEach(input => {
            input.classList.remove('is-valid', 'is-invalid');
            const feedbackElement = input.nextElementSibling;
            if (feedbackElement && feedbackElement.classList.contains('invalid-feedback')) {
                feedbackElement.style.display = 'none';
            }
        });

        inputs.forEach(input => {
            // Input event listener
            input.addEventListener('input', function() {
                validateField(this);
            });
            
            // Blur event listener
            input.addEventListener('blur', function() {
                validateField(this);
            });
        });

        // Reset validation state when modal is hidden
        const addressModal = document.getElementById('addressModal');
        if (addressModal) {
            addressModal.addEventListener('hidden.bs.modal', function () {
                inputs.forEach(input => {
                    input.classList.remove('is-valid', 'is-invalid');
                    const feedbackElement = input.nextElementSibling;
                    if (feedbackElement && feedbackElement.classList.contains('invalid-feedback')) {
                        feedbackElement.style.display = 'none';
                    }
                });
                form.reset();
            });
        }

        // Form submission handler
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            let isValid = true;
            inputs.forEach(input => {
                if (!input.validity.valid) {
                    isValid = false;
                }
                validateField(input);
            });

            if (!isValid) {
                return;
            }

            // Disable submit button
            const submitButton = form.querySelector('button[type="submit"]');
            if (submitButton) {
                submitButton.disabled = true;
            }

            const formData = {
                addressId: document.getElementById('addressId').value,
                addressType: document.getElementById('addressType').value,
                name: document.getElementById('name').value,
                phone: document.getElementById('phone').value,
                city: document.getElementById('city').value,
                landMark: document.getElementById('landmark').value,
                state: document.getElementById('state').value,
                pincode: document.getElementById('pincode').value
            };

            const isEdit = formData.addressId !== '';
            const url = isEdit ? `/edit-address/${formData.addressId}` : '/add-address';
            const method = isEdit ? 'PUT' : 'POST';

            try {
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (response.ok) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: isEdit ? 'Address updated successfully' : 'Address added successfully',
                        showConfirmButton: false,
                        timer: 1500
                    });

                    // Close modal and reset form
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addressModal'));
                    if (modal) {
                        modal.hide();
                    }
                    
                    // Reset form and validation state
                    inputs.forEach(input => {
                        input.classList.remove('is-valid', 'is-invalid');
                        const feedbackElement = input.nextElementSibling;
                        if (feedbackElement && feedbackElement.classList.contains('invalid-feedback')) {
                            feedbackElement.style.display = 'none';
                        }
                    });
                    form.reset();
                    
                    // Reset modal title for next use
                    document.getElementById('addressModalLabel').textContent = 'Add New Address';
                    
                    // Reload addresses
                    await loadAddresses();
                } else {
                    throw new Error(data.message || `Failed to ${isEdit ? 'update' : 'add'} address`);
                }
            } catch (error) {
                console.error('Error saving address:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message
                });
            } finally {
                // Re-enable submit button
                if (submitButton) {
                    submitButton.disabled = false;
                }
            }
        });
    }
});

async function cancelOrder(orderId) {
    try {
        const result = await Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        });

        if (result.isConfirmed) {
            const response = await fetch(`/cancel-order/${orderId}`, {
                method: 'POST'
            });
            const data = await response.json();

            if (data.success) {
                Swal.fire(
                    'Cancelled!',
                    'Your order has been cancelled.',
                    'success'
                ).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire(
                    'Error!',
                    data.message || 'Failed to cancel order',
                    'error'
                );
            }
        }
    } catch (error) {
        console.error('Error cancelling order:', error);
        Swal.fire(
            'Error!',
            'Something went wrong. Please try again.',
            'error'
        );
    }
}

async function viewOrderDetails(orderId) {
    try {
        const response = await fetch(`/api/orders/${orderId}`);
        const order = await response.json();
        
        if (order) {
            // Fill in the modal with order details
            document.getElementById('modalOrderId').textContent = order.orderId;
            document.getElementById('modalOrderDate').textContent = new Date(order.createdOn).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
            document.getElementById('modalOrderStatus').textContent = order.status;
            document.getElementById('modalPaymentMethod').textContent = order.paymentMethod;
            document.getElementById('modalPaymentStatus').textContent = order.paymentStatus;
            document.getElementById('modalTotalAmount').textContent = order.finalAmount;

            // Fill in address details
            if (order.address) {
                document.getElementById('modalAddressName').textContent = order.address.name;
                document.getElementById('modalAddressStreet').textContent = order.address.street;
                document.getElementById('modalAddressCity').textContent = `${order.address.city}, ${order.address.state} ${order.address.pincode}`;
                document.getElementById('modalAddressPhone').textContent = `Phone: ${order.address.mobile}`;
            }

            // Fill in ordered items
            const itemsContainer = document.getElementById('modalOrderItems');
            itemsContainer.innerHTML = '';
            
            order.orderedItems.forEach(item => {
                const productImage = item.product.product_img && item.product.product_img.length > 0 
                    ? `/uploads/re-image/${item.product.product_img[0]}`  
                    : '/uploads/re-image/default.jpeg';  
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="${productImage}" 
                                 alt="${item.product.name}" 
                                 class="rounded-3" 
                                 width="50" 
                                 height="50" 
                                 style="object-fit: cover;"
                                 onerror="this.src='/uploads/re-image/default.jpeg'">
                            <span class="ms-3">${item.product.name}</span>
                        </div>
                    </td>
                    <td>â‚¹${item.price}</td>
                    <td>${item.quantity}</td>
                    <td>â‚¹${item.price * item.quantity}</td>
                `;
                itemsContainer.appendChild(row);
            });

            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
            modal.show();
        }
    } catch (error) {
        console.error('Error fetching order details:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to load order details'
        });
    }
}
</script>

<!-- Address Modal -->
<div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content address-modal">
      <div class="modal-header">
        <h5 class="modal-title" id="addressModalLabel">Add New Address</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addressForm" class="needs-validation" novalidate>
          <input type="hidden" id="addressId" name="addressId">
          <!-- Address Type -->
          <div class="mb-3">
            <label for="addressType" class="form-label">Address Type</label>
            <select class="form-select" id="addressType" name="addressType" required>
              <option value="">Select Address Type</option>
              <option value="Home">Home</option>
              <option value="Work">Work</option>
              <option value="Other">Other</option>
            </select>
            <div class="invalid-feedback">Please select an address type</div>
          </div>

          <!-- Name -->
          <div class="mb-3">
            <label for="name" class="form-label">Full Name</label>
            <input type="text" class="form-control" id="name" name="name" pattern="[A-Za-z\s]{3,50}" required>
            <div class="invalid-feedback">Please enter a valid name (minimum 3 characters)</div>
          </div>

          <!-- Phone -->
          <div class="mb-3">
            <label for="phone" class="form-label">Phone Number</label>
            <input type="tel" class="form-control" id="phone" name="phone" pattern="[0-9]{10}" required>
            <div class="invalid-feedback">Please enter a valid 10-digit phone number</div>
          </div>

          <!-- City -->
          <div class="mb-3">
            <label for="city" class="form-label">City</label>
            <input type="text" class="form-control" id="city" name="city" required>
            <div class="invalid-feedback">Please enter your city</div>
          </div>

          <!-- Landmark -->
          <div class="mb-3">
            <label for="landmark" class="form-label">Landmark</label>
            <input type="text" class="form-control" id="landmark" name="landMark" required>
            <div class="invalid-feedback">Please enter a landmark</div>
          </div>

          <!-- State -->
          <div class="mb-3">
            <label for="state" class="form-label">State</label>
            <select class="form-select" id="state" name="state" required>
              <option value="">Select State</option>
              <option value="Andhra Pradesh">Andhra Pradesh</option>
              <option value="Arunachal Pradesh">Arunachal Pradesh</option>
              <option value="Assam">Assam</option>
              <option value="Bihar">Bihar</option>
              <option value="Chhattisgarh">Chhattisgarh</option>
              <option value="Goa">Goa</option>
              <option value="Gujarat">Gujarat</option>
              <option value="Haryana">Haryana</option>
              <option value="Himachal Pradesh">Himachal Pradesh</option>
              <option value="Jharkhand">Jharkhand</option>
              <option value="Karnataka">Karnataka</option>
              <option value="Kerala">Kerala</option>
              <option value="Madhya Pradesh">Madhya Pradesh</option>
              <option value="Maharashtra">Maharashtra</option>
              <option value="Manipur">Manipur</option>
              <option value="Meghalaya">Meghalaya</option>
              <option value="Mizoram">Mizoram</option>
              <option value="Nagaland">Nagaland</option>
              <option value="Odisha">Odisha</option>
              <option value="Punjab">Punjab</option>
              <option value="Rajasthan">Rajasthan</option>
              <option value="Sikkim">Sikkim</option>
              <option value="Tamil Nadu">Tamil Nadu</option>
              <option value="Telangana">Telangana</option>
              <option value="Tripura">Tripura</option>
              <option value="Uttar Pradesh">Uttar Pradesh</option>
              <option value="Uttarakhand">Uttarakhand</option>
              <option value="West Bengal">West Bengal</option>
            </select>
            <div class="invalid-feedback">Please select your state</div>
          </div>

          <!-- Pincode -->
          <div class="mb-3">
            <label for="pincode" class="form-label">Pincode</label>
            <input type="text" class="form-control" id="pincode" name="pincode" pattern="[0-9]{6}" required>
            <div class="invalid-feedback">Please enter a valid 6-digit pincode</div>
          </div>

          <div class="text-end">
            <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-success">Save Address</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Add these styles -->
<style>
.min-vh-50 {
    min-height: 50vh;
}

.card {
    border: 1px solid rgba(0,0,0,.125);
    transition: transform 0.2s, box-shadow 0.2s;
}

.card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.dropdown-item {
    padding: 0.5rem 1rem;
}

.dropdown-item i {
    width: 1rem;
}

.card-text {
    color: #6c757d;
    font-size: 0.9rem;
}

.modal-dialog {
  max-width: 500px;
}

.form-label {
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.btn-success {
  background-color: #198754;
  border-color: #198754;
}

.btn-success:hover {
  background-color: #157347;
  border-color: #146c43;
}

.form-control:focus,
.form-select:focus {
  border-color: #198754;
  box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25);
}

.invalid-feedback {
  display: none;
  margin-top: 0.25rem;
  font-size: 0.875em;
  color: #dc3545;
}

.is-invalid ~ .invalid-feedback {
  display: block;
}

.is-valid ~ .invalid-feedback {
  display: none !important;
}

.form-control:focus, .form-select:focus {
    box-shadow: none;
}

.form-control.is-valid, .form-select.is-valid {
    border-color: #198754;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
    padding-right: calc(1.5em + 0.75rem);
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.form-control.is-invalid, .form-select.is-invalid {
    border-color: #dc3545;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
    padding-right: calc(1.5em + 0.75rem);
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.form-select.is-invalid {
    padding-right: 4.125rem;
    background-position: right 0.75rem center, center right 2.25rem;
    background-size: 16px 12px, calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.invalid-feedback {
    display: none;
    margin-top: 0.25rem;
    font-size: 0.875em;
    color: #dc3545;
}

.is-invalid ~ .invalid-feedback {
    display: block;
}

.is-valid ~ .invalid-feedback {
    display: none !important;
}

/* Modern Address Card Styles */
.address-section {
    padding: 2rem 0;
}

.address-card {
    background: #ffffff;
    border-radius: 15px;
    border: 1px solid rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    height: 100%;
    position: relative;
    overflow: hidden;
}

.address-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
}

.address-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: linear-gradient(90deg, #00d2ff 0%, #3a7bd5 100%);
}

.address-card .card-body {
    padding: 1.5rem;
}

.address-type {
    display: inline-flex;
    align-items: center;
    padding: 0.35rem 0.75rem;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
    margin-bottom: 1rem;
    background: rgba(0, 0, 0, 0.05);
}

.address-type i {
    margin-right: 0.5rem;
    font-size: 1rem;
}

.address-type.home {
    background: rgba(52, 152, 219, 0.1);
    color: #3498db;
}

.address-type.work {
    background: rgba(46, 204, 113, 0.1);
    color: #2ecc71;
}

.address-type.other {
    background: rgba(155, 89, 182, 0.1);
    color: #9b59b6;
}

.address-name {
    font-size: 1.25rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 1rem;
}

.address-details {
    color: #7f8c8d;
    font-size: 0.95rem;
    line-height: 1.6;
}

.address-phone {
    display: flex;
    align-items: center;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid rgba(0, 0, 0, 0.05);
}

.address-phone i {
    margin-right: 0.5rem;
    color: #95a5a6;
}

.address-actions {
    position: absolute;
    top: 1rem;
    right: 1rem;
}

.address-actions .dropdown-toggle::after {
    display: none;
}

.address-actions .btn-link {
    color: #bdc3c7;
    transition: color 0.3s ease;
}

.address-actions .btn-link:hover {
    color: #7f8c8d;
}

.address-actions .dropdown-menu {
    border-radius: 12px;
    border: none;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    padding: 0.5rem;
}

.address-actions .dropdown-item {
    border-radius: 8px;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
}

.address-actions .dropdown-item:hover {
    background-color: rgba(0, 0, 0, 0.05);
}

.address-actions .dropdown-item i {
    width: 1.2rem;
}

.add-address-card {
    height: 100%;
    min-height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(0, 0, 0, 0.02);
    border: 2px dashed rgba(0, 0, 0, 0.1);
    border-radius: 15px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.add-address-card:hover {
    background: rgba(0, 0, 0, 0.04);
    border-color: rgba(0, 0, 0, 0.2);
}

.add-address-content {
    text-align: center;
    color: #95a5a6;
}

.add-address-content i {
    font-size: 2.5rem;
    margin-bottom: 1rem;
}

.add-address-content p {
    margin: 0;
    font-size: 1rem;
    font-weight: 500;
}

/* Empty state styling */
.empty-address-state {
    text-align: center;
    padding: 3rem 0;
}

.empty-address-state i {
    font-size: 4rem;
    color: #bdc3c7;
    margin-bottom: 1.5rem;
}

.empty-address-state p {
    color: #7f8c8d;
    font-size: 1.1rem;
    margin-bottom: 2rem;
}

/* Button Styles */
.btn-sm {
    padding: 0.4rem 0.8rem;
    font-size: 0.875rem;
    line-height: 1;
    border-radius: 4px;
    display: inline-flex;
    align-items: center;
    transition: all 0.2s ease;
}

.btn-dark {
    background-color: #212529;
    border-color: #212529;
}

.btn-dark:hover {
    background-color: #424649;
    border-color: #424649;
}

.btn-outline-danger {
    color: #dc3545;
    border-color: #dc3545;
}

.btn-outline-danger:hover {
    color: #fff;
    background-color: #dc3545;
    border-color: #dc3545;
}

.me-1 {
    margin-right: 0.25rem !important;
}

.ms-2 {
    margin-left: 0.5rem !important;
}

.d-inline-flex {
    display: inline-flex !important;
}

.align-items-center {
    align-items: center !important;
}
</style>