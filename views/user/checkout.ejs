<%- include('../layouts/user/header.ejs') %>

<div class="container-fluid checkout-container py-5">
    <div class="container pt-5">
        <div class="row">
            <!-- Left Column - Addresses and Payment -->
            <div class="col-lg-8">
                <!-- Saved Addresses -->
                <div class="card border-0 shadow-sm rounded-4 mb-4">
                    <div class="card-body p-4">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h4 class="mb-0 fw-bold">Delivery Address</h4>
                            <a href="/add-address" class="btn btn-outline-dark rounded-pill">
                                <i class="fas fa-plus me-2"></i>Add New Address
                            </a>
                        </div>
                        
                        <% if (addresses && addresses.length > 0) { %>
                            <div class="saved-addresses">
                                <% addresses.forEach((address, index) => { %>
                                    <div class="address-card mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" 
                                                   name="selectedAddress" 
                                                   id="address<%= index %>" 
                                                   value="<%= address._id %>"
                                                   <%= index === 0 ? 'checked' : '' %>>
                                            <label class="form-check-label w-100" for="address<%= index %>">
                                                <div class="address-details p-3">
                                                    <div class="d-flex justify-content-between align-items-start">
                                                        <div>
                                                            <div class="mb-2">
                                                                <span class="badge bg-secondary"><%= address.addressType %></span>
                                                            </div>
                                                            <h6 class="mb-1 fw-bold"><%= address.name %></h6>
                                                            <p class="mb-1"><%= address.landMark %></p>
                                                            <p class="mb-1"><%= address.city %>, <%= address.state %> <%= address.pincode %></p>
                                                            <p class="mb-0">
                                                                <i class="fas fa-phone-alt me-2 text-muted"></i>
                                                                <%= address.phone %>
                                                            </p>
                                                        </div>
                                                        <button type="button" class="btn btn-link text-dark p-0" 
                                                                onclick="editAddress(<%= index %>)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </label>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <div class="text-center py-4">
                                <i class="fas fa-map-marker-alt fa-3x mb-3 text-muted"></i>
                                <h5>No saved addresses</h5>
                                <p class="text-muted mb-4">Please add a delivery address to continue</p>
                                <a href="/add-address" class="btn btn-dark rounded-pill px-4">
                                    <i class="fas fa-plus me-2"></i>Add New Address
                                </a>
                            </div>
                        <% } %>
                    </div>
                </div>

                <!-- Payment Methods -->
                <div class="card border-0 shadow-sm rounded-4 mb-4">
                    <div class="card-body p-4">
                        <h4 class="mb-4 fw-bold">Payment Method</h4>
                        <div class="payment-methods">
                            <div class="payment-option mb-3">
                                <input class="payment-radio" type="radio" 
                                       name="paymentMethod" id="cod" 
                                       value="COD" checked>
                                <label class="payment-label" for="cod">
                                    <div class="d-flex align-items-center">
                                        <div class="payment-icon me-3">
                                            <i class="fas fa-money-bill-wave"></i>
                                        </div>
                                        <div>
                                            <span class="payment-title">Cash on Delivery (COD)</span>
                                            <p class="payment-description mb-0">Pay when you receive your order</p>
                                        </div>
                                    </div>
                                </label>
                            </div>
                            <div class="payment-option">
                                <input class="payment-radio" type="radio" 
                                       name="paymentMethod" id="online" 
                                       value="online">
                                <label class="payment-label" for="online">
                                    <div class="d-flex align-items-center">
                                        <div class="payment-icon me-3">
                                            <i class="fas fa-credit-card"></i>
                                        </div>
                                        <div>
                                            <span class="payment-title">Pay Online</span>
                                            <p class="payment-description mb-0">Credit/Debit Card, UPI, Net Banking</p>
                                        </div>
                                    </div>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column - Order Summary -->
            <div class="col-lg-4">
                <div class="card border-0 shadow-sm rounded-4 sticky-top" style="top: 2rem;">
                    <div class="card-body p-4">
                        <h4 class="fw-bold mb-4">Order Summary</h4>
                        
                        <!-- Cart Items -->
                        <div class="order-items mb-4">
                            <% cart.items.forEach(item => { %>
                                <div class="order-item d-flex align-items-center mb-3">
                                    <img src="/uploads/re-image/<%= item.productId.product_img[0] %>" 
                                         class="rounded-3" width="50" height="50" 
                                         style="object-fit: cover;"
                                         onerror="this.src='/uploads/re-image/default.jpeg'">
                                    <div class="ms-3 flex-grow-1">
                                        <h6 class="mb-1"><%= item.productId.name %></h6>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">Qty: <%= item.quantity %></small>
                                            <div class="text-end">
                                                <% if (item.offerPercentage > 0) { %>
                                                    <small class="text-decoration-line-through text-muted">₹<%= item.originalPrice %></small>
                                                    <% if (item.offerType === 'category') { %>
                                                        <span class="text-success ms-2">(Category <%= item.offerPercentage %>% off)</span>
                                                    <% } else { %>
                                                        <span class="text-success ms-2">(Product <%= item.offerPercentage %>% off)</span>
                                                    <% } %>
                                                    <br>
                                                    <% if (item.productOffer > 0 && item.categoryOffer > 0) { %>
                                                       
                                                        
                                                    <% } %>
                                                <% } %>
                                                <span class="fw-bold">₹<%= item.currentPrice %> × <%= item.quantity %></span>
                                            </div>
                                        </div>
                                        <div class="text-end mt-1">
                                            <span class="fw-bold text-dark">₹<%= item.totalPrice %></span>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>

                        <!-- Price Details -->
                        <div class="price-details">
                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-muted">Subtotal</span>
                                <span class="fw-bold">₹<%= subtotal %></span>
                            </div>
                            
                            <!-- Coupon Section -->
                            <div class="coupon-section mb-3">
                                <div class="input-group">
                                    <select class="form-select" id="couponCode">
                                        <option value="">Select a coupon</option>
                                        <% if (activeCoupons && activeCoupons.length > 0) { %>
                                            <% activeCoupons.forEach(coupon => { %>
                                                <option value="<%= coupon.name %>">
                                                    <%= coupon.name %> - Save ₹<%= coupon.offerPrice %> (Min: ₹<%= coupon.minimumPrice %>)
                                                </option>
                                            <% }); %>
                                        <% } %>
                                    </select>
                                    <button class="btn btn-outline-dark" type="button" onclick="applyCoupon()" id="applyCouponBtn">Apply</button>
                                    <button class="btn btn-outline-danger d-none" type="button" onclick="removeCoupon()" id="removeCouponBtn">Remove</button>
                                </div>
                                <div id="couponMessage" class="small mt-2"></div> 
                            </div>

                            <!-- Coupon Discount -->
                            <div id="couponDiscount" class="d-none">
                                <div class="d-flex justify-content-between mb-2">
                                    <span class="text-success">Coupon Discount</span>
                                    <span class="text-success">-₹<span id="discountAmount">0</span></span>
                                </div>
                            </div>

                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-muted">Shipping</span>
                                <span class="text-success">Free</span>
                            </div>
                            <hr class="my-3">
                            <div class="d-flex justify-content-between mb-4">
                                <span class="fw-bold">Total</span>
                                <span class="fw-bold fs-5">₹<span id="finalPrice"><%= subtotal %></span></span>
                            </div>

                            <!-- Place Order Button -->
                            <button onclick="placeOrder()" 
                                    class="btn btn-dark w-100 btn-lg rounded-pill"
                                    <%= (!addresses || addresses.length === 0) ? 'disabled' : '' %>>
                                Place Order
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit Address Modal -->
<div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editAddressForm" class="needs-validation" novalidate>
                    <input type="hidden" id="editAddressIndex" name="addressIndex">
                    
                    <!-- Address Type -->
                    <div class="mb-3">
                        <label for="editAddressType" class="form-label">Address Type</label>
                        <select class="form-select" id="editAddressType" name="addressType" required>
                            <option value="">Select Address Type</option>
                            <option value="Home">Home</option>
                            <option value="Work">Work</option>
                            <option value="Other">Other</option>
                        </select>
                        <div class="invalid-feedback">Please select an address type</div>
                    </div>

                    <!-- Name -->
                    <div class="mb-3">
                        <label for="editName" class="form-label">Full Name</label>
                        <input type="text" class="form-control" id="editName" name="name" pattern="[A-Za-z\s]{3,50}" required>
                        <div class="invalid-feedback">Please enter a valid name (minimum 3 characters)</div>
                    </div>

                    <!-- Phone -->
                    <div class="mb-3">
                        <label for="editPhone" class="form-label">Phone Number</label>
                        <input type="tel" class="form-control" id="editPhone" name="phone" pattern="[0-9]{10}" required>
                        <div class="invalid-feedback">Please enter a valid 10-digit phone number</div>
                    </div>

                    <!-- Landmark -->
                    <div class="mb-3">
                        <label for="editLandmark" class="form-label">Landmark</label>
                        <input type="text" class="form-control" id="editLandmark" name="landMark" required>
                        <div class="invalid-feedback">Please enter a landmark</div>
                    </div>

                    <!-- City -->
                    <div class="mb-3">
                        <label for="editCity" class="form-label">City</label>
                        <input type="text" class="form-control" id="editCity" name="city" required>
                        <div class="invalid-feedback">Please enter your city</div>
                    </div>

                    <!-- State -->
                    <div class="mb-3">
                        <label for="editState" class="form-label">State</label>
                        <select class="form-select" id="editState" name="state" required>
                            <option value="">Select State</option>
                            <option value="Andhra Pradesh">Andhra Pradesh</option>
                            <option value="Arunachal Pradesh">Arunachal Pradesh</option>
                            <option value="Assam">Assam</option>
                            <option value="Bihar">Bihar</option>
                            <option value="Chhattisgarh">Chhattisgarh</option>
                            <option value="Goa">Goa</option>
                            <option value="Gujarat">Gujarat</option>
                            <option value="Haryana">Haryana</option>
                            <option value="Himachal Pradesh">Himachal Pradesh</option>
                            <option value="Jharkhand">Jharkhand</option>
                            <option value="Karnataka">Karnataka</option>
                            <option value="Kerala">Kerala</option>
                            <option value="Madhya Pradesh">Madhya Pradesh</option>
                            <option value="Maharashtra">Maharashtra</option>
                            <option value="Manipur">Manipur</option>
                            <option value="Meghalaya">Meghalaya</option>
                            <option value="Mizoram">Mizoram</option>
                            <option value="Nagaland">Nagaland</option>
                            <option value="Odisha">Odisha</option>
                            <option value="Punjab">Punjab</option>
                            <option value="Rajasthan">Rajasthan</option>
                            <option value="Sikkim">Sikkim</option>
                            <option value="Tamil Nadu">Tamil Nadu</option>
                            <option value="Telangana">Telangana</option>
                            <option value="Tripura">Tripura</option>
                            <option value="Uttar Pradesh">Uttar Pradesh</option>
                            <option value="Uttarakhand">Uttarakhand</option>
                            <option value="West Bengal">West Bengal</option>
                        </select>
                        <div class="invalid-feedback">Please select your state</div>
                    </div>

                    <!-- Pincode -->
                    <div class="mb-3">
                        <label for="editPincode" class="form-label">Pincode</label>
                        <input type="text" class="form-control" id="editPincode" name="pincode" pattern="[0-9]{6}" required>
                        <div class="invalid-feedback">Please enter a valid 6-digit pincode</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-dark" onclick="updateAddress()">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<style>
.checkout-container {
    background-color: #f8f9fa;
    min-height: 100vh;
}

/* Address Card Styles */
.address-card {
    border: 1px solid #e5e5e5;
    border-radius: 12px;
    transition: all 0.3s ease;
    background: #fff;
}

.address-card:hover {
    border-color: #212529;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
}

.address-card .form-check {
    margin: 0;
    padding: 0;
}

.address-card .form-check-input {
    position: absolute;
    margin: 1.25rem;
}

.address-card .form-check-label {
    cursor: pointer;
    margin: 0;
    padding-left: 2.5rem;
}

/* Payment Method Styles */
.payment-option {
    position: relative;
}

.payment-radio {
    display: none;
}

.payment-label {
    display: block;
    padding: 1rem;
    border: 1px solid #dee2e6;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.payment-label:hover {
    background-color: #f8f9fa;
    transform: translateY(-2px);
}

.payment-radio:checked + .payment-label {
    border-color: #212529;
    background-color: #f8f9fa;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.payment-icon {
    width: 40px;
    height: 40px;
    background-color: #e9ecef;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.payment-icon i {
    font-size: 1.2rem;
    color: #212529;
}

.payment-title {
    display: block;
    font-weight: 600;
    color: #212529;
    margin-bottom: 0.25rem;
}

.payment-description {
    font-size: 0.875rem;
    color: #6c757d;
}

.payment-radio:checked + .payment-label .payment-icon {
    background-color: #212529;
}

.payment-radio:checked + .payment-label .payment-icon i {
    color: #ffffff;
}

/* Order Items */
.order-item {
    padding: 0.5rem;
    border-radius: 8px;
    transition: background-color 0.2s ease;
}

.order-item:hover {
    background-color: #f8f9fa;
}

.order-item img {
    border: 1px solid #eee;
}

/* Active States */
.address-card .form-check-input:checked ~ .form-check-label,
.payment-method .form-check-input:checked ~ .form-check-label {
    background-color: #f8f9fa;
}

/* Responsive Adjustments */
@media (max-width: 576px) {
    .payment-method .form-check-label,
    .address-card .form-check-label {
        padding-left: 2rem;
    }
    
    .payment-icon {
        width: 36px;
        height: 36px;
    }
}

/* Modal Styles */
.modal-content {
    border: none;
    border-radius: 12px;
}

.modal-header {
    border-bottom: 1px solid #e5e5e5;
    padding: 1.5rem;
}

.modal-body {
    padding: 1.5rem;
}

.modal-footer {
    border-top: 1px solid #e5e5e5;
    padding: 1.5rem;
}

.form-label {
    font-weight: 500;
    margin-bottom: 0.5rem;
}

.form-control,
.form-select {
    border-radius: 8px;
    padding: 0.75rem 1rem;
    border: 1px solid #e5e5e5;
    transition: all 0.3s ease;
}

.form-control:focus,
.form-select:focus {
    border-color: #212529;
    box-shadow: 0 0 0 0.2rem rgba(33, 37, 41, 0.15);
}

.btn-dark {
    border-radius: 8px;
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    transition: all 0.3s ease;
}

.btn-dark:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.invalid-feedback {
    font-size: 0.875rem;
    margin-top: 0.25rem;
}

/* Form validation styles */
.was-validated .form-control:invalid,
.form-control.is-invalid {
    border-color: #dc3545;
    padding-right: calc(1.5em + 0.75rem);
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.was-validated .form-control:valid,
.form-control.is-valid {
    border-color: #198754;
    padding-right: calc(1.5em + 0.75rem);
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}
</style>

<!-- Add Razorpay script -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
async function placeOrder() {
    try {
        // Get selected address
        const selectedAddressInput = document.querySelector('input[name="selectedAddress"]:checked');
        if (!selectedAddressInput) {
            Swal.fire({
                icon: 'warning',
                title: 'Select Address',
                text: 'Please select a delivery address'
            });
            return;
        }

        // Get selected payment method
        const selectedPaymentInput = document.querySelector('input[name="paymentMethod"]:checked');
        if (!selectedPaymentInput) {
            Swal.fire({
                icon: 'warning',
                title: 'Select Payment Method',
                text: 'Please select a payment method'
            });
            return;
        }

        // Get coupon code and prices
        const couponCode = document.getElementById('couponCode')?.value || '';
        
        // Get total price from the subtotal element
        const subtotalElement = document.querySelector('.price-details .d-flex:first-child .fw-bold');
        const totalPrice = subtotalElement ? parseFloat(subtotalElement.textContent.replace('₹', '')) : 0;
        
        // Get final price from the total element
        const finalPriceElement = document.getElementById('finalPrice');
        const finalPrice = finalPriceElement ? parseFloat(finalPriceElement.textContent) : totalPrice;

        if (!totalPrice || !finalPrice) {
            console.error('Price elements not found:', { totalPrice, finalPrice });
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Could not determine order amount. Please try again.'
            });
            return;
        }

        // Show loading state
        const orderBtn = document.querySelector('.btn-dark');
        orderBtn.disabled = true;
        orderBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Processing...';

        const paymentMethod = selectedPaymentInput.value; // This will be either 'COD' or 'online'
        console.log('Payment method selected:', paymentMethod);

        // Create order data
        const orderData = {
            addressId: selectedAddressInput.value,
            paymentMethod: paymentMethod,
            couponCode: couponCode,
            totalPrice: totalPrice,
            finalAmount: finalPrice
        };

        console.log('Starting order placement with data:', orderData);

        if (paymentMethod === 'online') {
            try {
                console.log('Creating Razorpay order for amount:', finalPrice);
                // Create Razorpay order first
                const razorpayResponse = await fetch('/create-razorpay-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ finalAmount: finalPrice })
                });

                if (!razorpayResponse.ok) {
                    const errorData = await razorpayResponse.json();
                    throw new Error(errorData.message || 'Failed to create Razorpay order');
                }

                const razorpayData = await razorpayResponse.json();
                console.log('Razorpay order created:', razorpayData);

                const options = {
                    key: razorpayData.key_id,
                    amount: razorpayData.order.amount,
                    currency: "INR",
                    name: "SketchSphere",
                    description: "SketchSphere Order Payment",
                    order_id: razorpayData.order.id,
                    handler: async function (response) {
                        console.log('Payment successful:', response);
                        
                        // Add payment details to order data
                        orderData.razorpay_payment_id = response.razorpay_payment_id;
                        orderData.razorpay_order_id = response.razorpay_order_id;
                        orderData.razorpay_signature = response.razorpay_signature;

                        try {
                            // Place the order with payment details
                            const orderResponse = await fetch('/place-order', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(orderData)
                            });

                            if (!orderResponse.ok) {
                                throw new Error('Failed to place order');
                            }

                            const orderResult = await orderResponse.json();

                            // Verify payment with backend
                            const verifyResponse = await fetch('/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    order_id: orderResult.orderId
                                })
                            });

                            if (!verifyResponse.ok) {
                                const errorData = await verifyResponse.json();
                                throw new Error(errorData.message || 'Payment verification failed');
                            }

                            // Payment verified successfully
                            Swal.fire({
                                icon: 'success',
                                title: 'Order Placed Successfully!',
                                text: 'Your payment has been verified.',
                                showConfirmButton: true
                            }).then(() => {
                                window.location.href = `/orderSuccess?orderId=${orderResult.orderId}`;
                            });

                        } catch (error) {
                            console.error('Error in payment process:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Failed',
                                text: error.message || 'Failed to process payment'
                            });
                            // Reset button state
                            orderBtn.disabled = false;
                            orderBtn.innerHTML = 'Place Order';
                        }
                    },
                    prefill: {
                        name: document.querySelector('input[name="selectedAddress"]:checked + label .fw-bold').textContent,
                        contact: document.querySelector('input[name="selectedAddress"]:checked + label .fa-phone-alt').nextSibling.textContent.trim()
                    },
                    theme: {
                        color: "#3399cc"
                    }
                };

                console.log('Initializing Razorpay with options:', {
                    ...options,
                    key: '***' // Hide key in logs
                });
                
                const rzp1 = new Razorpay(options);
                rzp1.open();
                
                // Reset button state
                orderBtn.disabled = false;
                orderBtn.innerHTML = 'Place Order';

            } catch (error) {
                console.error('Razorpay error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Failed',
                    text: error.message || 'Failed to initialize payment'
                });
                orderBtn.disabled = false;
                orderBtn.innerHTML = 'Place Order';
            }
        } else {
            // For COD orders
            try {
                console.log('Placing COD order');
                const response = await fetch('/place-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(orderData)
                });

                const result = await response.json();
                
                if (result.success) {
                    window.location.href = `/orderSuccess?orderId=${result.orderId}`;
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error placing COD order:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Order Failed',
                    text: error.message || 'Failed to place order'
                });
                orderBtn.disabled = false;
                orderBtn.innerHTML = 'Place Order';
            }
        }
    } catch (error) {
        console.error('Order placement error:', error);
        const orderBtn = document.querySelector('.btn-dark');
        orderBtn.disabled = false;
        orderBtn.innerHTML = 'Place Order';
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to place order'
        });
    }
}

async function editAddress(index) {
    try {
        const response = await fetch('/get-addresses');
        const data = await response.json();
        
        if (data.addresses && data.addresses[index]) {
            const address = data.addresses[index];
            
            // Fill form with address data
            document.getElementById('editAddressIndex').value = index;
            document.getElementById('editAddressType').value = address.addressType;
            document.getElementById('editName').value = address.name;
            document.getElementById('editPhone').value = address.phone;
            document.getElementById('editLandmark').value = address.landMark;
            document.getElementById('editCity').value = address.city;
            document.getElementById('editState').value = address.state;
            document.getElementById('editPincode').value = address.pincode;
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('editAddressModal'));
            modal.show();
        }
    } catch (error) {
        console.error('Error fetching address:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to load address details'
        });
    }
}

async function updateAddress() {
    try {
        const form = document.getElementById('editAddressForm');
        
        // Form validation
        if (!form.checkValidity()) {
            form.classList.add('was-validated');
            return;
        }

        const formData = new FormData(form);
        const addressData = Object.fromEntries(formData.entries());
        const index = addressData.addressIndex;
        delete addressData.addressIndex;

        const response = await fetch(`/edit-address/${index}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(addressData)
        });

        const data = await response.json();

        if (data.success) {
            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));
            modal.hide();
            
            // Show success message
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Address updated successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                // Reload page to show updated address
                window.location.reload();
            });
        } else {
            throw new Error(data.message || 'Failed to update address');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to update address. Please try again.'
        });
    }
}

async function applyCoupon() {
    const select = document.getElementById('couponCode');
    const couponCode = select.value.trim();
    const totalAmount = <%= subtotal %>;
    
    if (!couponCode) {
        showCouponMessage('Please select a coupon', 'text-danger');
        return;
    }

    try {
        const response = await fetch('/apply-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                couponCode: couponCode,
                totalAmount: totalAmount
            })
        });

        const data = await response.json();

        if (data.success) {
            // Show discount section
            document.getElementById('couponDiscount').classList.remove('d-none');
            document.getElementById('discountAmount').textContent = data.discount;
            
            // Update final price
            const finalPrice = totalAmount - data.discount;
            document.getElementById('finalPrice').textContent = finalPrice;
            
            // Show success message
            showCouponMessage(data.message, 'text-success');
            
            // Update UI for applied coupon
            select.disabled = true;
            document.getElementById('applyCouponBtn').classList.add('d-none');
            document.getElementById('removeCouponBtn').classList.remove('d-none');
        } else {
            showCouponMessage(data.message, 'text-danger');
        }
    } catch (error) {
        console.error('Error:', error);
        showCouponMessage('Failed to apply coupon. Please try again.', 'text-danger');
    }
}

async function removeCoupon() {
    try {
        const response = await fetch('/remove-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();

        if (data.success) {
            // Hide discount section
            document.getElementById('couponDiscount').classList.add('d-none');
            document.getElementById('discountAmount').textContent = '0';
            
            // Reset final price
            document.getElementById('finalPrice').textContent = <%= subtotal %>;
            
            // Reset coupon select
            const select = document.getElementById('couponCode');
            select.value = '';
            select.disabled = false;
            
            // Reset buttons
            document.getElementById('applyCouponBtn').classList.remove('d-none');
            document.getElementById('removeCouponBtn').classList.add('d-none');
            
            // Clear message
            document.getElementById('couponMessage').textContent = '';
        } else {
            showCouponMessage(data.message, 'text-danger');
        }
    } catch (error) {
        console.error('Error:', error);
        showCouponMessage('Failed to remove coupon. Please try again.', 'text-danger');
    }
}

function showCouponMessage(message, className) {
    const messageDiv = document.getElementById('couponMessage');
    messageDiv.textContent = message;
    messageDiv.className = 'small mt-2 ' + className;
}

// Form validation on input
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('editAddressForm');
    if (form) {
        const inputs = form.querySelectorAll('input, select');
        
        inputs.forEach(input => {
            input.addEventListener('input', function() {
                if (this.checkValidity()) {
                    this.classList.remove('is-invalid');
                    this.classList.add('is-valid');
                } else {
                    this.classList.remove('is-valid');
                    this.classList.add('is-invalid');
                }
            });
        });
    }
});

// Initialize tooltips
document.addEventListener('DOMContentLoaded', function() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
</script>

<%- include('../layouts/user/footer.ejs') %>
