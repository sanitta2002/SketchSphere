<%- include('../layouts/user/header.ejs') %>

<style>
    /* ... existing styles ... */
</style>

<main class="main pb-5 p-5">
    <!-- Breadcrumb -->
    <!-- ... existing breadcrumb code ... -->

    <!-- Main Content -->
    <section class="py-5 mb-5">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 mx-auto">
                    <div class="card p-5">
                        <!-- Header -->
                        <div class="card-header bg-white border-0 py-3 p-3">
                            <div class="d-flex justify-content-between align-items-center px-3">
                                <h5 class="mb-0 fw-bold">Order Item Details</h5>
                                <a href="/profile#orders" class="btn btn-modern btn-outline-secondary">
                                    <i class="fas fa-arrow-left me-2"></i>Back
                                </a>
                            </div>
                        </div>

                        <!-- Content -->
                        <div class="card-body p-5">
                            <div class="row g-4">
                                <!-- Product Image -->
                                <div class="col-md-4">
                                    <div class="product-image-wrap">
                                        <img src="<%= orderItem.product.product_img && orderItem.product.product_img.length > 0 ? 
                                                     `/uploads/re-image/${orderItem.product.product_img[0]}` : 
                                                     '/uploads/re-image/default.jpeg' %>" 
                                             alt="<%= orderItem.product.name %>"
                                             class="img-fluid rounded-3"
                                             onerror="this.src='/uploads/re-image/default.jpeg'">
                                    </div>
                                </div>
                            

                                <!-- Product Details -->
                                <div class="col-md-8">
                                    <div class="p-4">
                                        <h4 class="fw-bold mb-4"><%= orderItem.product.name %></h4>
                                        
                                        <!-- Info Cards -->
                                        <div class="row g-3">
                                            <div class="col-6">
                                                <div class="info-box">
                                                    <small class="text-muted d-block mb-1">Language</small>
                                                    <div class="fw-semibold"><%= orderItem.product.language || 'N/A' %></div>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="info-box">
                                                    <small class="text-muted d-block mb-1">Category</small>
                                                    <div class="fw-semibold">
                                                        <%= orderItem.product.category_id ? orderItem.product.category_id.name : 'N/A' %>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="info-box">
                                                    <small class="text-muted d-block mb-1">Price</small>
                                                    <div class="fw-bold text-success fs-5">₹<%= (orderItem.product.Sale_price * orderItem.quantity).toFixed(2) %>
                                                        <small class="text-muted">
                                                            (₹<%= orderItem.product.Sale_price.toFixed(2) %> × <%= orderItem.quantity %> items)
                                                        </small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="info-box">
                                                    <small class="text-muted d-block mb-1">Quantity</small>
                                                    <div class="fw-semibold"><%= orderItem.quantity %> items</div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Status Section -->
                                        <div class="mb-4">
                                            <h5 class="mb-3">Order Status</h5>
                                            <div class="d-flex align-items-center gap-3">
                                                <span class="badge <%= 
                                                    orderItem.status === 'Delivered' ? 'bg-success' : 
                                                    orderItem.status === 'Cancelled' ? 'bg-danger' : 
                                                    orderItem.status === 'Returned' ? 'bg-warning' :
                                                    orderItem.status === 'Shipped' ? 'bg-info' :
                                                    orderItem.status === 'Processing' ? 'bg-primary' :
                                                    'bg-secondary' %> status-badge">
                                                    <%= orderItem.status || 'Pending' %>
                                                </span>

                                                <% if (orderItem.status === 'Cancelled' && order.paymentMethod === 'online') { %>
                                                    <span class="badge <%= order.paymentStatus === 'Refunded' ? 'bg-success' : 'bg-warning' %>">
                                                        <%= order.paymentStatus === 'Refunded' ? 'Refunded to Wallet' : 'Refund Processing' %>
                                                    </span>
                                                <% } %>
                                                
                                                <% if (!['Delivered', 'Cancelled', 'Returned'].includes(orderItem.status)) { %>
                                                    <button onclick="confirmCancel()" class="btn btn-sm btn-outline-danger cancel-button">
                                                        Cancel Order
                                                    </button>
                                                <% } %>
                                                
                                                <% if (orderItem.status === 'Delivered' && !orderItem.returnRequested && !orderItem.returnReason) { %>
                                                    <button onclick="confirmReturn()" class="btn btn-sm btn-outline-warning return-button">
                                                        Return Item
                                                    </button>
                                                <% } else if (orderItem.status === 'Delivered' && (orderItem.returnRequested || orderItem.returnReason)) { %>
                                                    <span class="badge bg-warning">Return Requested</span>
                                                <% } %>
                                            </div>

                                            <!-- Payment Details -->
                                            <% if (order.paymentMethod === 'online') { %>
                                                <div class="mt-3">
                                                    <h6 class="mb-2">Payment Information</h6>
                                                    <div class="d-flex flex-column gap-2">
                                                        <div>
                                                            <small class="text-muted">Payment Method:</small>
                                                            <span class="ms-2">Online Payment (Razorpay)</span>
                                                        </div>
                                                        <div>
                                                            <small class="text-muted">Payment Status:</small>
                                                            <span class="ms-2 badge <%= 
                                                                order.paymentStatus === 'Completed' ? 'bg-success' :
                                                                order.paymentStatus === 'Refunded' ? 'bg-info' :
                                                                order.paymentStatus === 'Failed' ? 'bg-danger' :
                                                                'bg-warning' %>">
                                                                <%= order.paymentStatus %>
                                                            </span>
                                                        </div>
                                                        <% if (order.status === 'Cancelled' && order.refundDetails) { %>
                                                            <div>
                                                                <small class="text-muted">Refund Status:</small>
                                                                <span class="ms-2">
                                                                    Amount ₹<%= order.refundDetails.amount %> 
                                                                    <%= order.refundDetails.status === 'Completed' ? 
                                                                        'has been added to your wallet' : 
                                                                        'is being processed' %>
                                                                </span>
                                                            </div>
                                                            <div>
                                                                <small class="text-muted">Refund Date:</small>
                                                                <span class="ms-2">
                                                                    <%= new Date(order.refundDetails.processedAt).toLocaleDateString('en-US', {
                                                                        year: 'numeric',
                                                                        month: 'long',
                                                                        day: 'numeric'
                                                                    }) %>
                                                                </span>
                                                            </div>
                                                        <% } %>
                                                    </div>
                                                </div>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>

<%- include('../layouts/user/footer.ejs') %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    // Function to update status display
    function updateStatusDisplay(status) {
        const statusBadge = document.querySelector('.status-badge');
        if (statusBadge) {
            // Remove all existing color classes
            statusBadge.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'bg-info', 'bg-primary', 'bg-secondary');
            
            // Add appropriate color class based on status
            switch (status) {
                case 'Delivered':
                    statusBadge.classList.add('bg-success');
                    break;
                case 'Cancelled':
                    statusBadge.classList.add('bg-danger');
                    break;
                case 'Returned':
                    statusBadge.classList.add('bg-warning');
                    break;
                case 'Shipped':
                    statusBadge.classList.add('bg-info');
                    break;
                case 'Processing':
                    statusBadge.classList.add('bg-primary');
                    break;
                default:
                    statusBadge.classList.add('bg-secondary');
            }
            
            // Update the status text
            statusBadge.textContent = status || 'Pending';
        }

        // Update button visibility
        const cancelButton = document.querySelector('.cancel-button');
        const returnButton = document.querySelector('.return-button');
        
        if (cancelButton) {
            cancelButton.style.display = 
                ['Delivered', 'Cancelled', 'Returned'].includes(status) ? 'none' : 'inline-block';
        }
        
        if (returnButton) {
            returnButton.style.display = 
                status === 'Delivered' ? 'inline-block' : 'none';
        }
    }

    // Function to refresh order status
    async function refreshOrderStatus() {
        try {
            const urlParams = new URLSearchParams(window.location.search);
            const orderId = urlParams.get('orderId');
            
            const response = await fetch(`/get-order-status/${orderId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();
            if (data.success) {
                updateStatusDisplay(data.status);
            }
        } catch (error) {
            console.error('Error refreshing order status:', error);
        }
    }

    // Refresh status every 30 seconds
    setInterval(refreshOrderStatus, 30000);

    function confirmCancel() {
        Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                cancelOrder();
            }
        });
    }

    async function cancelOrder() {
        try {
            const urlParams = new URLSearchParams(window.location.search);
            const orderId = urlParams.get('orderId');
            const itemId = urlParams.get('itemId');
            
            console.log('Cancelling order item:', orderId, itemId);

            const response = await fetch(`/update-order-item-status/${orderId}/${itemId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    status: 'Cancelled'
                })
            });

            const data = await response.json();
            console.log('Cancel order response:', data);

            if (data.success) {
                // Show success message with refund details if applicable
                if (data.refundAmount) {
                    Swal.fire({
                        title: 'Order Cancelled Successfully!',
                        html: `<div class="text-center">
                                <p class="mb-3">Your order has been cancelled.</p>
                                <div class="alert alert-success">
                                    <strong>Refund Status:</strong><br>
                                    Amount ₹${data.refundAmount} has been added to your wallet
                                </div>
                              </div>`,
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: 'Order Cancelled!',
                        text: data.message,
                        icon: 'success'
                    }).then(() => {
                        window.location.reload();
                    });
                }
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: data.message || 'Failed to cancel order',
                    icon: 'error'
                });
            }
        } catch (error) {
            console.error('Error cancelling order:', error);
            Swal.fire({
                title: 'Error!',
                text: 'Failed to cancel order. Please try again.',
                icon: 'error'
            });
        }
    }

    function confirmReturn() {
        Swal.fire({
            title: 'Return Item',
            html: `
                <div class="mb-3">
                    <label for="returnReasonSelect" class="form-label">Select Return Reason</label>
                    <select class="form-select" id="returnReasonSelect">
                        <option value="">Select a reason</option>
                        <option value="Damaged Product">Damaged Product</option>
                        <option value="Wrong Item Received">Wrong Item Received</option>
                        <option value="Not as Described">Not as Described</option>
                        <option value="Size/Fit Issue">Size/Fit Issue</option>
                        <option value="Quality Issue">Quality Issue</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="mb-3" id="returnReasonTextContainer" style="display: none;">
                    <label for="returnReasonText" class="form-label">Please specify the reason</label>
                    <textarea class="form-control" id="returnReasonText" rows="3"></textarea>
                </div>
            `,
            showCancelButton: true,
            confirmButtonText: 'Submit Return Request',
            cancelButtonText: 'Cancel',
            didOpen: () => {
                const select = document.getElementById('returnReasonSelect');
                const textContainer = document.getElementById('returnReasonTextContainer');
                select.addEventListener('change', (e) => {
                    textContainer.style.display = e.target.value === 'Other' ? 'block' : 'none';
                });
            },
            preConfirm: () => {
                const select = document.getElementById('returnReasonSelect');
                const textarea = document.getElementById('returnReasonText');
                if (!select.value) {
                    Swal.showValidationMessage('Please select a reason for return');
                    return false;
                }
                const reason = select.value === 'Other' ? textarea.value : select.value;
                if (select.value === 'Other' && !textarea.value.trim()) {
                    Swal.showValidationMessage('Please provide details for other reason');
                    return false;
                }
                return reason;
            }
        }).then((result) => {
            if (result.isConfirmed) {
                updateItemStatus('Return', result.value);
            }
        });
    }

    function updateItemStatus(status, returnReason = null) {
        // Get the current URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const orderId = urlParams.get('orderId');
        const itemId = urlParams.get('itemId');

        // Prepare the request body
        const body = { 
            status: status === 'Return' ? 'Delivered' : status,
            returnReason: returnReason
        };

        // Make the API call
        fetch(`/update-order-item-status/${orderId}/${itemId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(body)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: status === 'Return' ? 
                          'Return request has been submitted successfully. We will review your request.' : 
                          'Order has been cancelled successfully.',
                    icon: 'success',
                    confirmButtonColor: '#198754'
                }).then(() => {
                    window.location.reload();
                });
            } else {
                throw new Error(data.message || 'Failed to update status');
            }
        })
        .catch(error => {
            Swal.fire({
                title: 'Error!',
                text: error.message || 'Something went wrong. Please try again.',
                icon: 'error',
                confirmButtonColor: '#dc3545'
            });
        });
    }
</script>

<style>
.order-timeline {
    position: relative;
    padding: 20px 0;
    margin: 30px 0;
}

.timeline-progress {
    position: absolute;
    top: 50px;
    left: 0;
    width: 100%;
    height: 4px;
}

.progress-track {
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: #e9ecef;
    border-radius: 4px;
}

.progress-fill {
    position: absolute;
    width: 0;
    height: 100%;
    background-color: #28a745;
    border-radius: 4px;
    transition: width 0.5s ease;
}

.timeline-points {
    position: relative;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-top: 20px;
}

.timeline-point {
    position: relative;
    text-align: center;
    min-width: 80px;
    z-index: 1;
}

.point-icon {
    width: 40px;
    height: 40px;
    background: white;
    border: 2px solid #dee2e6;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 10px;
    color: #6c757d;
    transition: all 0.3s ease;
}

.point-label {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.point-label .status {
    font-weight: 600;
    color: #495057;
    font-size: 0.9rem;
}

.point-label .date {
    font-size: 0.8rem;
    color: #6c757d;
}

/* Active state */
.timeline-point.active .point-icon {
    background: #28a745;
    border-color: #28a745;
    color: white;
    transform: scale(1.1);
}

.timeline-point.active .status {
    color: #28a745;
}

/* Hover effect */
.timeline-point:hover .point-icon {
    transform: scale(1.1);
}

/* Responsive adjustments */
@media (max-width: 576px) {
    .timeline-points {
        flex-direction: column;
        align-items: flex-start;
        gap: 20px;
    }

    .timeline-point {
        display: flex;
        align-items: center;
        width: 100%;
        text-align: left;
    }

    .point-icon {
        margin: 0 15px 0 0;
    }

    .timeline-progress {
        display: none;
    }
}
</style>