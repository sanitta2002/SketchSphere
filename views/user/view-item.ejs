<%- include('../layouts/user/header.ejs') %>

<style>
    /* ... existing styles ... */
</style>

<main class="main pb-5 p-5">
    <!-- Breadcrumb -->
    <!-- ... existing breadcrumb code ... -->

    <!-- Main Content -->
    <section class="py-5 mb-5">
        <div class="container">
            <div class="row">
                <div class="col-lg-10 mx-auto">
                    <div class="card p-5">
                        <!-- Header -->
                        <div class="card-header bg-white border-0 py-3 p-3">
                            <div class="d-flex justify-content-between align-items-center px-3">
                                <h5 class="mb-0 fw-bold">Order Item Details</h5>
                                <a href="/profile#orders" class="btn btn-modern btn-outline-secondary">
                                    <i class="fas fa-arrow-left me-2"></i>Back
                                </a>
                            </div>
                        </div>

                        <!-- Content -->
                        <div class="card-body p-5">
                            <div class="row g-4">
                                <!-- Product Image -->
                                <div class="col-md-4">
                                    <div class="product-image-wrap">
                                        <img src="<%= orderItem.product.product_img && orderItem.product.product_img.length > 0 ? 
                                                     `/uploads/re-image/${orderItem.product.product_img[0]}` : 
                                                     '/uploads/re-image/default.jpeg' %>" 
                                             alt="<%= orderItem.product.name %>"
                                             class="img-fluid rounded-3"
                                             onerror="this.src='/uploads/re-image/default.jpeg'">
                                    </div>
                                </div>
                            

                                <!-- Product Details -->
                                <div class="col-md-8">
                                    <div class="p-4">
                                        <h4 class="fw-bold mb-4"><%= orderItem.product.name %></h4>
                                        
                                        <!-- Info Cards -->
                                        <div class="row g-3">
                                            <div class="col-6">
                                                <div class="info-box">
                                                    <small class="text-muted d-block mb-1">Language</small>
                                                    <div class="fw-semibold"><%= orderItem.product.language || 'N/A' %></div>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="info-box">
                                                    <small class="text-muted d-block mb-1">Category</small>
                                                    <div class="fw-semibold">
                                                        <%= orderItem.product.category_id ? orderItem.product.category_id.name : 'N/A' %>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="info-box">
                                                    <small class="text-muted d-block mb-1">Price</small>
                                                    <div class="fw-bold text-success fs-5">₹<%= (orderItem.product.Sale_price * orderItem.quantity).toFixed(2) %>
                                                        <small class="text-muted">
                                                            (₹<%= orderItem.product.Sale_price.toFixed(2) %> × <%= orderItem.quantity %> items)
                                                        </small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="info-box">
                                                    <small class="text-muted d-block mb-1">Quantity</small>
                                                    <div class="fw-semibold"><%= orderItem.quantity %> items</div>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Status Section -->
                                        <div class="mb-4">
                                            <h5 class="mb-3">Order Status</h5>
                                            <div class="d-flex align-items-center gap-3">
                                                <span class="badge <%= 
                                                    orderItem.status === 'Delivered' ? 'bg-success' : 
                                                    orderItem.status === 'Cancelled' ? 'bg-danger' : 
                                                    orderItem.status === 'Returned' ? 'bg-warning' :
                                                    orderItem.status === 'Shipped' ? 'bg-info' :
                                                    orderItem.status === 'Processing' ? 'bg-primary' :
                                                    'bg-secondary' %>">
                                                    <%= orderItem.status || 'Pending' %>
                                                </span>
                                                
                                                <% if (!['Delivered', 'Cancelled', 'Returned'].includes(orderItem.status)) { %>
                                                    <button onclick="confirmCancel()" class="btn btn-sm btn-outline-danger">
                                                        Cancel Order
                                                    </button>
                                                <% } %>
                                                
                                                <% if (orderItem.status === 'Delivered') { %>
                                                    <% if (!orderItem.returnRequested && !orderItem.returnReason) { %>
                                                        <button onclick="confirmReturn()" class="btn btn-sm btn-outline-primary">
                                                            Return Item
                                                        </button>
                                                    <% } else if (orderItem.returnReason) { %>
                                                        <div class="text-muted">
                                                            <small>Return Reason: <%= orderItem.returnReason %></small>
                                                        </div>
                                                    <% } %>
                                                <% } %>
                                            </div>

                                            <!-- Status Timeline -->
                                            <div class="mt-4">
                                                <div class="order-timeline">
                                                    <% 
                                                    const statuses = ['Pending', 'Processing', 'Shipped', 'Delivered'];
                                                    const currentIndex = statuses.indexOf(orderItem.status);
                                                    const icons = {
                                                        'Pending': 'clock',
                                                        'Processing': 'cog',
                                                        'Shipped': 'truck',
                                                        'Delivered': 'check-circle'
                                                    };
                                                    %>
                                                    
                                                    <div class="timeline-progress">
                                                        <div class="progress-track"></div>
                                                        <div class="progress-fill" style="width: <%= (currentIndex / (statuses.length - 1)) * 100 %>%"></div>
                                                    </div>

                                                    <div class="timeline-points">
                                                        <% statuses.forEach((status, index) => { %>
                                                            <div class="timeline-point <%= index <= currentIndex ? 'active' : '' %>">
                                                                <div class="point-icon">
                                                                    <i class="fas fa-<%= icons[status] %>"></i>
                                                                </div>
                                                                <div class="point-label">
                                                                    <span class="status"><%= status %></span>
                                                                    <% if (index <= currentIndex) { %>
                                                                        <span class="date">
                                                                            <%= new Date().toLocaleDateString('en-US', {
                                                                                month: 'short',
                                                                                day: 'numeric'
                                                                            }) %>
                                                                        </span>
                                                                    <% } %>
                                                                </div>
                                                            </div>
                                                        <% }); %>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>

<%- include('../layouts/user/footer.ejs') %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    function confirmCancel() {
        Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!',
            cancelButtonText: 'No, keep it'
        }).then((result) => {
            if (result.isConfirmed) {
                // Get the current URL parameters
                const urlParams = new URLSearchParams(window.location.search);
                const orderId = urlParams.get('orderId');
                const itemId = urlParams.get('itemId');

                // Make the API call
                fetch(`/update-order-item-status/${orderId}/${itemId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ status: 'Cancelled' })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Cancelled!',
                            text: 'Your order has been cancelled successfully.',
                            icon: 'success',
                            confirmButtonColor: '#28a745'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error(data.message || 'Failed to cancel order');
                    }
                })
                .catch(error => {
                    Swal.fire({
                        title: 'Error!',
                        text: error.message || 'Something went wrong. Please try again.',
                        icon: 'error',
                        confirmButtonColor: '#dc3545'
                    });
                });
            }
        });
    }

    function confirmReturn() {
        Swal.fire({
            title: 'Return Item',
            html: `
                <div class="mb-3">
                    <label class="form-label">Please tell us why you want to return this item:</label>
                    <select class="form-select mb-3" id="returnReasonSelect">
                        <option value="">Select a reason</option>
                        <option value="Damaged Product">Product is damaged</option>
                        <option value="Wrong Item">Received wrong item</option>
                        <option value="Not as Described">Item not as described</option>
                        <option value="Changed Mind">Changed my mind</option>
                        <option value="Other">Other reason</option>
                    </select>
                    <textarea id="returnReasonText" class="form-control" 
                        placeholder="Please provide additional details..." 
                        style="display: none;"
                        rows="3"></textarea>
                </div>
            `,
            showCancelButton: true,
            confirmButtonColor: '#0d6efd',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Submit Return Request',
            cancelButtonText: 'Cancel',
            didOpen: () => {
                // Show textarea when "Other" is selected
                const select = document.getElementById('returnReasonSelect');
                const textarea = document.getElementById('returnReasonText');
                select.addEventListener('change', (e) => {
                    textarea.style.display = e.target.value === 'Other' ? 'block' : 'none';
                });
            },
            preConfirm: () => {
                const select = document.getElementById('returnReasonSelect');
                const textarea = document.getElementById('returnReasonText');
                if (!select.value) {
                    Swal.showValidationMessage('Please select a reason for return');
                    return false;
                }
                const reason = select.value === 'Other' ? textarea.value : select.value;
                if (select.value === 'Other' && !textarea.value.trim()) {
                    Swal.showValidationMessage('Please provide details for other reason');
                    return false;
                }
                return reason;
            }
        }).then((result) => {
            if (result.isConfirmed) {
                updateItemStatus('Return', result.value);
            }
        });
    }

    function updateItemStatus(status, returnReason = null) {
        // Get the current URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const orderId = urlParams.get('orderId');
        const itemId = urlParams.get('itemId');

        // Prepare the request body
        const body = { status };
        if (returnReason) {
            body.returnReason = returnReason;
        }

        // Make the API call
        fetch(`/update-order-item-status/${orderId}/${itemId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(body)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: status === 'Cancelled' ? 
                          'Order has been cancelled successfully.' : 
                          'Return request has been submitted successfully. We will review your request.',
                    icon: 'success',
                    confirmButtonColor: '#198754'
                }).then(() => {
                    window.location.reload();
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: 'Something went wrong. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#dc3545'
                });
            }
        })
        .catch(error => {
            Swal.fire({
                title: 'Error!',
                text: 'Something went wrong. Please try again.',
                icon: 'error',
                confirmButtonColor: '#dc3545'
            });
        });
    }
</script>

<style>
.order-timeline {
    position: relative;
    padding: 20px 0;
    margin: 30px 0;
}

.timeline-progress {
    position: absolute;
    top: 50px;
    left: 0;
    width: 100%;
    height: 4px;
}

.progress-track {
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: #e9ecef;
    border-radius: 4px;
}

.progress-fill {
    position: absolute;
    width: 0;
    height: 100%;
    background-color: #28a745;
    border-radius: 4px;
    transition: width 0.5s ease;
}

.timeline-points {
    position: relative;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-top: 20px;
}

.timeline-point {
    position: relative;
    text-align: center;
    min-width: 80px;
    z-index: 1;
}

.point-icon {
    width: 40px;
    height: 40px;
    background: white;
    border: 2px solid #dee2e6;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 10px;
    color: #6c757d;
    transition: all 0.3s ease;
}

.point-label {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.point-label .status {
    font-weight: 600;
    color: #495057;
    font-size: 0.9rem;
}

.point-label .date {
    font-size: 0.8rem;
    color: #6c757d;
}

/* Active state */
.timeline-point.active .point-icon {
    background: #28a745;
    border-color: #28a745;
    color: white;
    transform: scale(1.1);
}

.timeline-point.active .status {
    color: #28a745;
}

/* Hover effect */
.timeline-point:hover .point-icon {
    transform: scale(1.1);
}

/* Responsive adjustments */
@media (max-width: 576px) {
    .timeline-points {
        flex-direction: column;
        align-items: flex-start;
        gap: 20px;
    }

    .timeline-point {
        display: flex;
        align-items: center;
        width: 100%;
        text-align: left;
    }

    .point-icon {
        margin: 0 15px 0 0;
    }

    .timeline-progress {
        display: none;
    }
}
</style>