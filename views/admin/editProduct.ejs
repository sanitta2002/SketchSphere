<%- include('../../Views/layouts/admin/header.ejs') %>

<head>
    <style>
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }
 
        .thumbnail {
            margin-right: 10px;
            transition: opacity 0.3s ease;
        }

        .image-cropper {
            position: relative;
            max-width: 500px;
            margin: 20px auto;
        }
 
        .error-message {
            color: red;
            display: none;
        }

        .cropper-container {
            max-width: 100%;
            margin: 0 auto;
        }

        .image-preview img {
            max-width: 100%;
            height: auto;
        }

        .cropper-view-box,
        .cropper-face {
            border-radius: 0;
        }

        .preview-container {
            margin-top: 10px;
            text-align: center;
        }

        .btn-crop-group {
            margin-top: 10px;
            text-align: center;
        }

        .cropped-image {
            max-width: 200px;
            margin: 10px auto;
            display: block;
        }

        .delete-image-btn {
            position: absolute;
            top: 0;
            right: 0;
            padding: 2px 6px;
            background: rgba(220, 53, 69, 0.9);
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .delete-image-btn:hover {
            background: rgba(200, 35, 51, 1);
        }

        .deletion-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            pointer-events: none;
        }
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
</head>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <% if (typeof product !== 'undefined' && product) { %>
                        <form method="post" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data" onsubmit="return validateForm();">
                            <input type="hidden" name="deletedImages" id="deletedImages" value="">

                            <div class="mb-4">
                                <label for="productName" class="form-label">Product Name</label>
                                <input type="text" name="productName" value="<%= product.name || '' %>" class="form-control border" id="productName">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea name="description" class="form-control border" rows="4" id="description"><%= product.description || '' %></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Published Date</label>
                                <input type="date" name="published_date" value="<%= product.Published_Date ? product.Published_Date.toISOString().split('T')[0] : '' %>" class="form-control border" id="published_date">
                                <div id="publishedDate-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Writer</label>
                                <input type="text" name="writer" value="<%= product.writer || '' %>" placeholder="Enter writer name" class="form-control border" id="writer">
                                <div id="writer-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Cover Artist</label>
                                <input type="text" name="cover_Artist" value="<%= product.cover_Artist || '' %>" placeholder="Enter cover artist name" class="form-control border" id="cover_Artist">
                                <div id="coverArtist-error" class="error-message"></div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input name="regularPrice" type="text" value="<%= product.Regular_price || '' %>" class="form-control border" id="regularPrice">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input name="salePrice" type="text" value="<%= product.Sale_price || '' %>" class="form-control border" id="salePrice">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input name="quantity" type="text" value="<%= product.available_quantity || '' %>" class="form-control border" id="quantity">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" style="width: 150px;" name="category" id="category">
                                                <% if (typeof cat !== 'undefined' && cat) { %>
                                                    <% for(let i = 0; i < cat.length; i++) { %>
                                                        <option value="<%= cat[i].name %>" <%= (product.category === cat[i].name) ? 'selected' : '' %>>
                                                            <%= cat[i].name %>
                                                        </option>
                                                    <% } %>
                                                <% } %>
                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Language</label>
                                            <select class="form-select border" style="width: 150px;" name="language" id="language">
                                                <option value="">Select Language</option>
                                                <option value="English" <%= product.language === 'English' ? 'selected' : '' %>>English</option>
                                                <option value="Malayalam" <%= product.language === 'Malayalam' ? 'selected' : '' %>>Malayalam</option>
                                                <option value="Hindi" <%= product.language === 'Hindi' ? 'selected' : '' %>>Hindi</option>
                                                <option value="Tamil" <%= product.language === 'Tamil' ? 'selected' : '' %>>Tamil</option>
                                            </select>
                                            <div id="language-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Product Images</h4>
                                </div>
                                <div class="card-body">
                                    <!-- Display existing images -->
                                    <div class="mb-4">
                                        <label class="form-label">Current Images</label>
                                        <div class="thumbnails-container">
                                            <% if (product.product_img && product.product_img.length > 0) { %>
                                                <% product.product_img.forEach((image, index) => { %>
                                                    <div class="thumbnail" style="position: relative;" data-image="<%= image %>">
                                                        <img src="/uploads/re-image/<%= image %>" alt="Product Image <%= index + 1 %>" 
                                                            style="width: 100px; height: 100px; object-fit: cover; margin: 5px;">
                                                        <button type="button" class="btn btn-danger btn-sm delete-image-btn" 
                                                            onclick="markImageForDeletion('<%= image %>', this)">
                                                            <i class="fas fa-times"></i>
                                                        </button>
                                                    </div>
                                                <% }); %>
                                            <% } else { %>
                                                <p>No images available</p>
                                            <% } %>
                                        </div>
                                    </div>

                                    <!-- New image upload inputs -->
                                    <div class="mb-4">
                                        <label class="form-label">Add New Images</label>
                                        <div id="image-error" class="error-message"></div>
                                        <% for(let i = 1; i <= 4; i++) { %>
                                            <div class="mb-3">
                                                <input class="form-control product-image" type="file" name="images" id="input<%= i %>"
                                                    accept="image/png, image/jpeg, image/jpg"
                                                    onchange="viewImage(event, <%= i %>)">
                                                
                                                <!-- Original Image Preview -->
                                                <div class="image-preview mt-3">
                                                    <img src="" alt="" id="imgView<%= i %>" style="display: none; max-width: 200px;">
                                                </div>
                                                
                                                <!-- Cropper Container -->
                                                <div class="image-cropper d-none">
                                                    <div class="cropper-container">
                                                        <img src="" id="cropperImg<%= i %>" alt="">
                                                    </div>
                                                    <div class="btn-crop-group">
                                                        <button type="button" class="btn btn-success btn-sm" onclick="saveCrop(<%= i %>)">
                                                            <i class="fas fa-check"></i> Save Crop
                                                        </button>
                                                        <button type="button" class="btn btn-danger btn-sm" onclick="cancelCrop(<%= i %>)">
                                                            <i class="fas fa-times"></i> Cancel
                                                        </button>
                                                    </div>
                                                </div>
                                                
                                                <!-- Cropped Image Preview -->
                                                <div class="preview-container">
                                                    <img src="" id="croppedImg<%= i %>" class="cropped-image" style="display: none;">
                                                </div>
                                            </div>
                                        <% } %>
                                        <div id="images-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-4">
                                <button class="btn btn-primary" type="submit">Update Product</button>
                            </div>
                        </form>
                    <% } else { %>
                        <div class="alert alert-danger">
                            Product not found or data is unavailable.
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
    let croppers = {};
    let deletedImagesList = [];

    function viewImage(event, index) {
        const input = event.target;
        if (input.files && input.files[0]) {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                // Hide original preview
                const originalPreview = document.getElementById(`imgView${index}`);
                originalPreview.style.display = 'none';
                
                // Show and setup cropper
                const cropperContainer = document.querySelector(`#input${index}`).nextElementSibling.nextElementSibling;
                cropperContainer.classList.remove('d-none');
                
                const cropperImg = document.getElementById(`cropperImg${index}`);
                cropperImg.src = e.target.result;
                
                // Destroy existing cropper if any
                if (croppers[index]) {
                    croppers[index].destroy();
                }
                
                // Initialize new cropper
                croppers[index] = new Cropper(cropperImg, {
                    aspectRatio: 1,
                    viewMode: 2,
                    dragMode: 'move',
                    autoCropArea: 0.8,
                    guides: true,
                    center: true,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                });
            };
            
            reader.readAsDataURL(input.files[0]);
        }
    }

    function saveCrop(index) {
        if (croppers[index]) {
            const canvas = croppers[index].getCroppedCanvas({
                width: 600,
                height: 600,
                minWidth: 256,
                minHeight: 256,
                maxWidth: 4096,
                maxHeight: 4096,
                fillColor: '#fff',
                imageSmoothingEnabled: true,
                imageSmoothingQuality: 'high',
            });

            const croppedImage = document.getElementById(`croppedImg${index}`);
            croppedImage.src = canvas.toDataURL('image/jpeg', 0.9);
            croppedImage.style.display = 'block';

            // Hide cropper container
            const cropperContainer = document.querySelector(`#input${index}`).nextElementSibling.nextElementSibling;
            cropperContainer.classList.add('d-none');

            // Destroy cropper
            croppers[index].destroy();
            croppers[index] = null;

            // Create a new file from the cropped image
            canvas.toBlob(function(blob) {
                const file = new File([blob], `cropped_image_${index}.jpg`, { type: 'image/jpeg' });
                
                // Create a new FileList-like object
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                
                // Update the input file
                document.getElementById(`input${index}`).files = dataTransfer.files;
            }, 'image/jpeg', 0.9);
        }
    }

    function cancelCrop(index) {
        if (croppers[index]) {
            // Hide cropper container
            const cropperContainer = document.querySelector(`#input${index}`).nextElementSibling.nextElementSibling;
            cropperContainer.classList.add('d-none');
            
            // Clear the input
            document.getElementById(`input${index}`).value = '';
            
            // Hide the cropped image
            document.getElementById(`croppedImg${index}`).style.display = 'none';
            
            // Destroy cropper
            croppers[index].destroy();
            croppers[index] = null;
        }
    }

    function markImageForDeletion(imageName, button) {
        Swal.fire({
            title: 'Are you sure?',
            text: "This image will be removed when you update the product",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, mark for deletion'
        }).then((result) => {
            if (result.isConfirmed) {
                // Add image to deleted list
                deletedImagesList.push(imageName);
                
                // Update hidden input
                document.getElementById('deletedImages').value = JSON.stringify(deletedImagesList);
                
                // Hide the thumbnail
                const thumbnail = button.closest('.thumbnail');
                thumbnail.style.opacity = '0.5';
                thumbnail.style.position = 'relative';
                
                // Add "Marked for deletion" overlay
                const overlay = document.createElement('div');
                overlay.className = 'deletion-overlay';
                overlay.innerHTML = 'Marked for deletion';
                thumbnail.appendChild(overlay);
                
                // Change button to "Undo"
                button.innerHTML = '<i class="fas fa-undo"></i>';
                button.classList.remove('btn-danger');
                button.classList.add('btn-warning');
                button.onclick = () => undoImageDeletion(imageName, button);
                
                Swal.fire(
                    'Marked for deletion',
                    'The image will be removed when you update the product',
                    'success'
                );
            }
        });
    }

    function undoImageDeletion(imageName, button) {
        // Remove image from deleted list
        deletedImagesList = deletedImagesList.filter(img => img !== imageName);
        
        // Update hidden input
        document.getElementById('deletedImages').value = JSON.stringify(deletedImagesList);
        
        // Restore thumbnail appearance
        const thumbnail = button.closest('.thumbnail');
        thumbnail.style.opacity = '1';
        
        // Remove overlay
        const overlay = thumbnail.querySelector('.deletion-overlay');
        if (overlay) {
            overlay.remove();
        }
        
        // Restore delete button
        button.innerHTML = '<i class="fas fa-times"></i>';
        button.classList.remove('btn-warning');
        button.classList.add('btn-danger');
        button.onclick = () => markImageForDeletion(imageName, button);
        
        Swal.fire(
            'Restored',
            'The image will not be deleted',
            'success'
        );
    }

    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }
    }

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        for (let element of errorElements) {
            element.style.display = 'none';
            element.textContent = '';
        }
    }


    function validateForm() {
        clearErrorMessages();
        let isValid = true;

        // Product Name validation
        const productName = document.getElementById('productName').value.trim();
        if (!productName) {
            displayErrorMessage('productName-error', 'Product name is required');
            isValid = false;
        } else if (!/^[a-zA-Z0-9\s]{3,}$/.test(productName)) {
            displayErrorMessage('productName-error', 'Product name must be at least 3 characters and contain only letters, numbers and spaces');
            isValid = false;
        }

        // Description validation
        const description = document.getElementById('description').value.trim();
        if (!description) {
            displayErrorMessage('description-error', 'Description is required');
            isValid = false;
        } else if (description.length < 10) {
            displayErrorMessage('description-error', 'Description must be at least 10 characters long');
            isValid = false;
        }

        // Published Date validation
        const publishedDate = document.getElementById('published_date').value.trim();
        if (!publishedDate) {
            displayErrorMessage('publishedDate-error', 'Published date is required');
            isValid = false;
        }

        // Writer validation
        const writer = document.getElementById('writer').value.trim();
        if (!writer) {
            displayErrorMessage('writer-error', 'Writer is required');
            isValid = false;
        }

        // Cover Artist validation
        const coverArtist = document.getElementById('cover_Artist').value.trim();
        if (!coverArtist) {
            displayErrorMessage('coverArtist-error', 'Cover artist is required');
            isValid = false;
        }

        // Regular Price validation
        const regularPrice = document.getElementById('regularPrice').value.trim();
        if (!regularPrice) {
            displayErrorMessage('regularPrice-error', 'Regular price is required');
            isValid = false;
        } else if (!/^\d+(\.\d{1,2})?$/.test(regularPrice)) {
            displayErrorMessage('regularPrice-error', 'Please enter a valid price (e.g., 99.99)');
            isValid = false;
        } else if (parseFloat(regularPrice) <= 0) {
            displayErrorMessage('regularPrice-error', 'Price must be greater than 0');
            isValid = false;
        }

        // Sale Price validation
        const salePrice = document.getElementById('salePrice').value.trim();
        if (salePrice) {
            if (!/^\d+(\.\d{1,2})?$/.test(salePrice)) {
                displayErrorMessage('salePrice-error', 'Please enter a valid price (e.g., 99.99)');
                isValid = false;
            } else if (parseFloat(salePrice) <= 0) {
                displayErrorMessage('salePrice-error', 'Sale price must be greater than 0');
                isValid = false;
            } else if (parseFloat(salePrice) >= parseFloat(regularPrice)) {
                displayErrorMessage('salePrice-error', 'Sale price must be less than regular price');
                isValid = false;
            }
        }

        // Quantity validation
        const quantity = document.getElementById('quantity').value.trim();
        if (!quantity) {
            displayErrorMessage('quantity-error', 'Quantity is required');
            isValid = false;
        } else if (!/^\d+$/.test(quantity)) {
            displayErrorMessage('quantity-error', 'Quantity must be a whole number');
            isValid = false;
        } else if (parseInt(quantity) <= 0) {
            displayErrorMessage('quantity-error', 'Quantity must be greater than 0');
            isValid = false;
        }

        // Category validation
        const category = document.getElementById('category').value;
        if (!category) {
            displayErrorMessage('category-error', 'Please select a category');
            isValid = false;
        }

        // Language validation
        const language = document.getElementById('language').value;
        if (!language) {
            displayErrorMessage('language-error', 'Please select a language');
            isValid = false;
        }

        // Image validation
        const existingImages = document.querySelectorAll('.thumbnail').length;
        const deletedImages = deletedImagesList.length;
        const remainingExistingImages = existingImages - deletedImages;
        
        const newImageInputs = document.querySelectorAll('.product-image');
        let newImagesCount = 0;
        
        newImageInputs.forEach(input => {
            if (input.files && input.files[0]) {
                const file = input.files[0];
                // Check file type
                if (!file.type.match('image/jpeg') && !file.type.match('image/png') && !file.type.match('image/jpg')) {
                    displayErrorMessage('image-error', 'Only JPG, JPEG, and PNG files are allowed');
                    isValid = false;
                    return;
                }
                // Check file size (max 5MB)
                if (file.size > 5 * 1024 * 1024) {
                    displayErrorMessage('image-error', 'Image size should not exceed 5MB');
                    isValid = false;
                    return;
                }
                newImagesCount++;
            }
        });

        // Check if there's at least one image (either existing or new)
        if (remainingExistingImages === 0 && newImagesCount === 0) {
            displayErrorMessage('image-error', 'At least one product image is required');
            isValid = false;
        }

        return isValid;
    }
</script>

<%- include('../../Views/layouts/admin/footer.ejs') %>