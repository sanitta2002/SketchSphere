<%- include('../../Views/layouts/admin/header.ejs') %>

<head>
    <style>
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }
 
        .thumbnail {
            margin-right: 10px;
        }
        .image-cropper {
            position: relative;
        }
 
        .error-message {
            color: red;
            display: none;
        }
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <% if (typeof product !== 'undefined' && product) { %>
                        <form method="post" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data" onsubmit="return validationForm()">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" name="productName" value="<%= product.name || '' %>" class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea name="description" class="form-control border" rows="4"><%= product.description || '' %></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input name="regularPrice" type="text" value="<%= product.Regular_price || '' %>" class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input name="salePrice" type="text" value="<%= product.Sale_price || '' %>" class="form-control border">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input name="quantity" type="text" value="<%= product.available_quantity || '' %>" class="form-control border">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" style="width: 150px;" name="category">
                                                <% if (typeof cat !== 'undefined' && cat) { %>
                                                    <% for(let i = 0; i < cat.length; i++) { %>
                                                        <option value="<%= cat[i].name %>" <%= (product.category === cat[i].name) ? 'selected' : '' %>>
                                                            <%= cat[i].name %>
                                                        </option>
                                                    <% } %>
                                                <% } %>
                                            </select>
                                            <div id="category-error" class="error-message"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Product Images</h4>
                                </div>
                                <div class="card-body">
                                    <!-- Display existing images -->
                                    <div class="mb-4">
                                        <label class="form-label">Current Images</label>
                                        <div class="thumbnails-container">
                                            <% if (product.product_img && product.product_img.length > 0) { %>
                                                <% product.product_img.forEach((image, index) => { %>
                                                    <div class="thumbnail" style="position: relative;">
                                                        <img src="/uploads/re-image/<%= image %>" alt="Product Image <%= index + 1 %>" 
                                                            style="width: 100px; height: 100px; object-fit: cover; margin: 5px;">
                                                        <button type="button" class="btn btn-danger btn-sm" 
                                                            style="position: absolute; top: 0; right: 0;"
                                                            onclick="deleteImage('<%= image %>', '<%= product._id %>', this)">
                                                            Ã—
                                                        </button>
                                                    </div>
                                                <% }); %>
                                            <% } else { %>
                                                <p>No images available</p>
                                            <% } %>
                                        </div>
                                    </div>

                                    <!-- New image upload inputs -->
                                    <div class="mb-4">
                                        <label class="form-label">Add New Images</label>
                                        <% for(let i = 1; i <= 4; i++) { %>
                                            <div class="mb-3">
                                                <input class="form-control" type="file" name="images" id="input<%= i %>"
                                                    accept="image/png, image/jpeg, image/jpg"
                                                    onchange="viewImage(event, <%= i %>)">
                                                <img id="imgView<%= i %>" src="#" alt="Preview" style="display: none; max-width: 200px; margin-top: 10px;">
                                                <div class="image-cropper d-none">
                                                    <button type="button" id="saveButton<%= i %>" class="btn btn-primary">Save Crop</button>
                                                </div>
                                                <img id="croppedImg<%= i %>" src="#" alt="Cropped" style="display: none; max-width: 200px; margin-top: 10px;">
                                            </div>
                                        <% } %>
                                    </div>
                                </div>
                            </div>

                            <div class="mt-4">
                                <button class="btn btn-primary" type="submit">Update Product</button>
                            </div>
                        </form>
                    <% } else { %>
                        <div class="alert alert-danger">
                            Product not found or data is unavailable.
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script>
    function viewImage1(event) {
        const img = document.getElementById("imgView1");
        img.src = URL.createObjectURL(event.target.files[0]);
        img.style.display = "block";
    }

    function viewImage2(event) {
        const img = document.getElementById("imgView2");
        img.src = URL.createObjectURL(event.target.files[0]);
        img.style.display = "block";
    }

    function viewImage3(event) {
        const img = document.getElementById("imgView3");
        img.src = URL.createObjectURL(event.target.files[0]);
        img.style.display = "block";
    }

    function viewImage4(event) {
        const img = document.getElementById("imgView4");
        img.src = URL.createObjectURL(event.target.files[0]);
        img.style.display = "block";
    }

    function viewImage(event, index) {
        const input = event.target;
        if (input.files && input.files[0]) {
            const reader = new FileReader();
            reader.onload = function() {
                const image = document.getElementById("imgView" + index);
                image.src = reader.result;
                
                const cropperContainer = document.querySelector(`#input${index}`).nextElementSibling.nextElementSibling;
                cropperContainer.classList.remove('d-none');
                cropperContainer.classList.add('d-flex');

                const cropper = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    autoCropArea: 1,
                });

                document.querySelector("#saveButton" + index).addEventListener("click", function() {
                    const canvas = cropper.getCroppedCanvas();
                    const croppedImage = document.getElementById("croppedImg" + index);
                    croppedImage.src = canvas.toDataURL();

                    canvas.toBlob(function(blob) {
                        const file = new File([blob], `cropped-image-${index}.png`, { type: 'image/png' });
                        const dataTransfer = new DataTransfer();
                        dataTransfer.items.add(file);
                        input.files = dataTransfer.files;
                    });

                    cropper.destroy();
                    cropperContainer.classList.remove('d-flex');
                    cropperContainer.classList.add('d-none');
                });
            };
            reader.readAsDataURL(input.files[0]);
        }
    }

    function deleteImage(imageName, productId, button) {
        if (confirm('Are you sure you want to delete this image?')) {
            fetch('/admin/deleteImage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    imageNameTOServer: imageName,
                    productIdToServer: productId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Remove the image thumbnail from the UI
                    button.closest('.thumbnail').remove();
                } else {
                    alert('Failed to delete image: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error deleting image');
            });
        }
    }

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        for (let element of errorElements) {
            element.style.display = 'none';
            element.textContent = '';
        }
    }

    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }
    }

    function validationForm() {
        clearErrorMessages();
        let isValid = true;

        // Product Name validation
        const productName = document.getElementsByName('productName')[0].value.trim();
        if (!productName) {
            displayErrorMessage('productName-error', 'Product name is required');
            isValid = false;
        } else if (!/^[a-zA-Z0-9\s]{3,}$/.test(productName)) {
            displayErrorMessage('productName-error', 'Product name must be at least 3 characters and contain only letters, numbers and spaces');
            isValid = false;
        }

        // Description validation
        const description = document.getElementsByName('description')[0].value.trim();
        if (!description) {
            displayErrorMessage('description-error', 'Description is required');
            isValid = false;
        } else if (description.length < 10) {
            displayErrorMessage('description-error', 'Description must be at least 10 characters long');
            isValid = false;
        }

        // Regular Price validation
        const regularPrice = document.getElementsByName('regularPrice')[0].value.trim();
        if (!regularPrice) {
            displayErrorMessage('regularPrice-error', 'Regular price is required');
            isValid = false;
        } else if (!/^\d+(\.\d{1,2})?$/.test(regularPrice)) {
            displayErrorMessage('regularPrice-error', 'Please enter a valid price (e.g., 99.99)');
            isValid = false;
        } else if (parseFloat(regularPrice) <= 0) {
            displayErrorMessage('regularPrice-error', 'Price must be greater than 0');
            isValid = false;
        }

        // Sale Price validation
        const salePrice = document.getElementsByName('salePrice')[0].value.trim();
        if (salePrice) {
            if (!/^\d+(\.\d{1,2})?$/.test(salePrice)) {
                displayErrorMessage('salePrice-error', 'Please enter a valid price (e.g., 99.99)');
                isValid = false;
            } else if (parseFloat(salePrice) <= 0) {
                displayErrorMessage('salePrice-error', 'Sale price must be greater than 0');
                isValid = false;
            } else if (parseFloat(salePrice) >= parseFloat(regularPrice)) {
                displayErrorMessage('salePrice-error', 'Sale price must be less than regular price');
                isValid = false;
            }
        }

        // Quantity validation
        const quantity = document.getElementsByName('quantity')[0].value.trim();
        if (!quantity) {
            displayErrorMessage('quantity-error', 'Quantity is required');
            isValid = false;
        } else if (!/^\d+$/.test(quantity)) {
            displayErrorMessage('quantity-error', 'Quantity must be a whole number');
            isValid = false;
        } else if (parseInt(quantity) <= 0) {
            displayErrorMessage('quantity-error', 'Quantity must be greater than 0');
            isValid = false;
        }

        if (isValid) {
            document.querySelector('form').submit();
        }
        return false;
    }
</script>

<%- include('../../Views/layouts/admin/footer.ejs') %>