<%- include('../../Views/layouts/admin/header.ejs') %>

<section class="content-main">
    <div class="content-header">
        <div class="d-flex justify-content-between align-items-center w-100">
            <h2 class="content-title card-title">Dashboard </h2>
            <div class="text-end">
                <a href="/admin/sales-report" class="btn btn-primary">View Sales Report</a>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card dashboard-card h-100">
                <div class="card-body">
                    <div class="stat-icon bg-primary-light">
                        <i class="fas fa-money-bill text-primary"></i>
                    </div>
                    <h6 class="card-title mb-2">Total Revenue</h6>
                    <h3 class="mb-0">₹<%= summary.totalAmount.toFixed(2) %></h3>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card dashboard-card h-100">
                <div class="card-body">
                    <div class="stat-icon bg-success-light">
                        <i class="fas fa-shopping-cart text-success"></i>
                    </div>
                    <h6 class="card-title mb-2">Total Orders</h6>
                    <h3 class="mb-0"><%= summary.totalOrders %></h3>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card dashboard-card h-100">
                <div class="card-body">
                    <div class="stat-icon bg-info-light">
                        <i class="fas fa-box text-info"></i>
                    </div>
                    <h6 class="card-title mb-2">Products Sold</h6>
                    <h3 class="mb-0"><%= summary.totalProductsSold %></h3>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="card dashboard-card h-100">
                <div class="card-body">
                    <div class="stat-icon bg-warning-light">
                        <i class="fas fa-tags text-warning"></i>
                    </div>
                    <h6 class="card-title mb-2">Total Discounts</h6>
                    <h3 class="mb-0">₹<%= summary.totalDiscount.toFixed(2) %></h3>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="row">
        <!-- Sales Chart -->
        <div class="col-12 mb-4">
            <div class="card dashboard-card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h5 class="card-title">Sales Overview</h5>
                        <select class="form-select" style="width: auto;" id="salesChartFilter">
                            <option value="monthly" selected>Monthly</option>
                            <option value="yearly">Yearly</option>
                            <option value="weekly">Weekly</option>
                            <option value="daily">Daily</option>
                        </select>
                    </div>
                    <div class="chart-container" style="position: relative; height: 400px;">
                        <canvas id="salesChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Best Selling Products -->
        <div class="col-md-6 mb-4">
            <div class="card dashboard-card">
                <div class="card-body">
                    <h5 class="card-title mb-4">Top Products</h5>
                    <div class="chart-container">
                        <canvas id="productsChart"></canvas>
                    </div>
                    <div class="table-responsive mt-4">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Product</th>
                                    <th class="text-center">Sales</th>
                                    <th class="text-end">Revenue</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% topProducts.forEach((product, index) => { %>
                                <tr>
                                    <td><%= index + 1 %></td>
                                    <td><%= product.name %></td>
                                    <td class="text-center"><%= product.sales %></td>
                                    <td class="text-end">₹<%= product.revenue.toFixed(2) %></td>
                                </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Best Selling Categories -->
        <div class="col-md-6 mb-4">
            <div class="card dashboard-card">
                <div class="card-body">
                    <h5 class="card-title mb-4">Top Categories</h5>
                    <div class="chart-container">
                        <canvas id="categoriesChart"></canvas>
                    </div>
                    <div class="table-responsive mt-4">
                        <table class="table">
                            <!-- <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Category</th>
                                    <th class="text-center">Sales</th>
                                    <th class="text-end">Revenue</th>
                                </tr>
                            </thead> -->
                            <tbody>
                                <% topCategories.forEach((category, index) => { %>
                                <!-- <tr>
                                    <td><%= index + 1 %></td>
                                    <td><%= category.name %></td>
                                    <td class="text-center"><%= category.sales %></td>
                                    <td class="text-end">₹<%= category.revenue.toFixed(2) %></td>
                                </tr> -->
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
    :root {
        --primary-color: #0C977F;
        --primary-light: #e6f4f1;
        --secondary-color: #2c3e50;
        --success-color: #2ecc71;
        --warning-color: #f1c40f;
        --info-color: #3498db;
        --danger-color: #e74c3c;
        --background-color: #f8f9fa;
        --card-shadow: 0 2px 20px rgba(0,0,0,0.08);
        --hover-shadow: 0 10px 30px rgba(0,0,0,0.15);
    }

    .container-fluid {
        background-color: var(--background-color);
        min-height: calc(100vh - 60px);
    }

    .dashboard-card {
        height: 100%;
        box-shadow: var(--card-shadow);
        border: none;
        border-radius: 12px;
        transition: all 0.3s ease;
    }

    .dashboard-card:hover {
        box-shadow: var(--hover-shadow);
    }

    .chart-container {
        position: relative;
        height: 300px;
        width: 100%;
        margin: 0 auto;
    }

    .card-body {
        padding: 1.5rem;
    }

    .stat-icon {
        width: 56px;
        height: 56px;
        border-radius: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 1rem;
        font-size: 1.5rem;
    }

    .bg-primary-light { background-color: var(--primary-light); }
    .bg-success-light { background-color: #e8f8f0; }
    .bg-warning-light { background-color: #fef7e6; }
    .bg-info-light { background-color: #e7f3fb; }

    .text-primary { color: var(--primary-color) !important; }
    .text-success { color: var(--success-color) !important; }
    .text-warning { color: var(--warning-color) !important; }
    .text-info { color: var(--info-color) !important; }

    .card-title {
        color: #64748b;
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .form-select {
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        transition: all 0.2s ease;
    }

    .form-select:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 2px rgba(12, 151, 127, 0.1);
    }

    @media (max-width: 768px) {
        .container-fluid {
            padding: 1rem;
        }
        
        .dashboard-card {
            margin-bottom: 1rem;
        }
    }
</style>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', async function() {
        const salesCtx = document.getElementById('salesChart').getContext('2d');
        let salesChart = null;

        function initializeSalesChart(data) {
            if (salesChart) {
                salesChart.destroy();
            }

            // Create gradient
            const gradientFill = salesCtx.createLinearGradient(0, 0, 0, 400);
            gradientFill.addColorStop(0, 'rgba(12, 151, 127, 0.2)');
            gradientFill.addColorStop(1, 'rgba(12, 151, 127, 0)');

            // Ensure data exists
            const chartData = {
                labels: data?.labels || [],
                values: data?.values?.map(v => Number(v) || 0) || [],
                productCounts: data?.productCounts?.map(v => Number(v) || 0) || []
            };

            console.log('Initializing chart with data:', chartData);

            salesChart = new Chart(salesCtx, {
                type: 'line',
                data: {
                    labels: chartData.labels,
                    datasets: [
                        {
                            label: 'Revenue (₹)',
                            data: chartData.values,
                            borderColor: '#0C977F',
                            backgroundColor: gradientFill,
                            borderWidth: 2,
                            tension: 0.4,
                            fill: true,
                            yAxisID: 'y'
                        },
                        {
                            label: 'Products Sold',
                            data: chartData.productCounts,
                            borderColor: '#3498db',
                            backgroundColor: 'rgba(52, 152, 219, 0.1)',
                            borderWidth: 2,
                            tension: 0.4,
                            fill: true,
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            backgroundColor: 'rgba(255, 255, 255, 0.9)',
                            titleColor: '#000',
                            bodyColor: '#000',
                            borderColor: '#ddd',
                            borderWidth: 1,
                            padding: 12,
                            callbacks: {
                                label: function(context) {
                                    if (context.dataset.label === 'Revenue (₹)') {
                                        return `Revenue: ₹${context.raw.toLocaleString('en-IN')}`;
                                    }
                                    return `Products: ${context.raw}`;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '₹' + value.toLocaleString('en-IN');
                                }
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            beginAtZero: true,
                            grid: {
                                drawOnChartArea: false
                            }
                        }
                    }
                }
            });
        }

        // Function to load chart data
        async function loadChartData(period = 'monthly') {
            try {
                const response = await fetch(`/admin/sales-data?period=${period}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch data');
                }
                const data = await response.json();
                console.log('Received chart data:', data);
                initializeSalesChart(data);
            } catch (error) {
                console.error('Error loading chart data:', error);
                // Initialize with empty data if fetch fails
                initializeSalesChart({
                    labels: [],
                    values: [],
                    productCounts: []
                });
            }
        }

        // Load initial data
        await loadChartData();

        // Add filter change handler
        document.getElementById('salesChartFilter').addEventListener('change', function(e) {
            loadChartData(e.target.value);
        });

        // Products Chart
        const topProducts = <%- JSON.stringify(topProducts || []) %>;
        new Chart(document.getElementById('productsChart').getContext('2d'), {
            type: 'doughnut',
            data: {
                labels: topProducts.length ? topProducts.map(p => p.name) : ['No Data'],
                datasets: [{
                    data: topProducts.length ? topProducts.map(p => p.sales) : [1],
                    backgroundColor: [
                        '#0C977F', '#2ecc71', '#3498db', '#f1c40f', '#e74c3c',
                        '#9b59b6', '#1abc9c', '#34495e', '#16a085', '#27ae60'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                        labels: {
                            padding: 20,
                            font: {
                                size: 12
                            }
                        }
                    }
                }
            }
        });

        // Categories Chart
        const topCategories = <%- JSON.stringify(topCategories || []) %>;
        console.log('Categories Data for Chart:', topCategories);
        
        const categoryColors = [
            '#0C977F', '#2ecc71', '#3498db', '#f1c40f', '#e74c3c',
            '#9b59b6', '#1abc9c', '#34495e', '#16a085', '#27ae60'
        ];

        if (document.getElementById('categoriesChart')) {
            new Chart(document.getElementById('categoriesChart').getContext('2d'), {
                type: 'pie',
                data: {
                    labels: topCategories.length ? topCategories.map(c => c.name || 'Unknown') : ['No Categories'],
                    datasets: [{
                        data: topCategories.length ? topCategories.map(c => c.sales || 0) : [1],
                        backgroundColor: categoryColors.slice(0, Math.max(topCategories.length, 1)),
                        borderWidth: 2,
                        borderColor: '#ffffff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                padding: 20,
                                font: { size: 12 },
                                generateLabels: function(chart) {
                                    const data = chart.data;
                                    if (data.labels.length && data.datasets.length) {
                                        return data.labels.map((label, i) => {
                                            const value = data.datasets[0].data[i];
                                            const backgroundColor = data.datasets[0].backgroundColor[i];
                                            return {
                                                text: `${label} (${value})`,
                                                fillStyle: backgroundColor,
                                                strokeStyle: backgroundColor,
                                                lineWidth: 2,
                                                hidden: isNaN(value) || value === 0,
                                                index: i
                                            };
                                        });
                                    }
                                    return [];
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw || 0;
                                    const dataset = context.dataset;
                                    const total = dataset.data.reduce((acc, data) => acc + (data || 0), 0);
                                    const percentage = total ? Math.round((value / total) * 100) : 0;
                                    return `${label}: ${value} sales (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Handle sales chart filter changes
    });
</script>

<%- include('../../Views/layouts/admin/footer.ejs') %>